<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.koscom.person.dao.PersonMapper">
	<insert id="createPersonAgreeHist" parameterType="com.koscom.person.model.PersonAgreeHistVO">
        INSERT INTO PERSON_AGREE_HIST
            (     NO_PERSON
                , DT_AGREE
                , CD_AGREE
                , TERMS_CONTENT
                , TERMS_VERSION
                , TERMS_DATE
                , TERMS_START_DATE
                , TERMS_END_DATE
                , YN_DISUSE
                , ID_FRT
                , DT_FRT
            ) VALUES (
                  #{no_person, 			jdbcType=VARCHAR}
                , #{dt_agree, 			jdbcType=VARCHAR}
                , #{cd_agree, 			jdbcType=VARCHAR}
                , #{terms_content, 		jdbcType=VARCHAR}
                , #{terms_version, 		jdbcType=VARCHAR}
                , #{terms_date, 		jdbcType=VARCHAR}
                , #{terms_start_date, 	jdbcType=VARCHAR}
                , #{terms_end_date, 	jdbcType=VARCHAR}
                , #{yn_disuse, 			jdbcType=VARCHAR}
                , #{id_frt, 			jdbcType=VARCHAR}
                , SYSDATE
            )
    </insert>

    <insert id="createPersonAgreedtHist" parameterType="com.koscom.person.model.PersonAgreedtHistVO">
        INSERT INTO PERSON_AGREEDT_HIST
            (     NO_PERSON
                , DT_AGREE
                , CD_AGREE
                , CD_FC
                , ID_FRT
                , DT_FRT
            ) VALUES (
                  #{no_person, 			jdbcType=VARCHAR}
                , #{dt_agree, 			jdbcType=VARCHAR}
                , #{cd_agree, 			jdbcType=VARCHAR}
                , #{cd_fc, 				jdbcType=VARCHAR}
                , #{id_frt, 			jdbcType=VARCHAR}
                , SYSDATE
            )
    </insert>

	<select id="getPersonInfoHp" parameterType="String" resultType="com.koscom.person.model.PersonVO">
		/* com.koscom.person.dao.PersonMapper.getPersonInfoHp */
		SELECT A.*, B.DT_BASIC, B.YN_INSTALLMENT
		  FROM PERSON_INFO A LEFT OUTER JOIN PERSON_SET_INFO B ON
		       A.NO_PERSON = B.NO_PERSON
		 WHERE HP = #{hp, jdbcType=VARCHAR}
	</select>

	<select id="getPersonInfo" parameterType="java.lang.String" resultType="com.koscom.person.model.PersonVO">
        /* com.koscom.person.dao.PersonMapper.getPersonInfo : 회원정보 */
        SELECT  NO_PERSON                                  AS no_person       /* 회원관리번호       */
               ,NM_PERSON                                  AS nm_person       /* 회원명             */
               ,XX1.DEC_VARCHAR2_SEL(SSN_PERSON, '10', 'FS_ARIA', 'PERSON_INFO', 'SSN_PERSON')   AS ssn_person      /* 주민번호           */
               ,PASS_PERSON                                AS pass_person     /* 패스워드           */
               ,BGN                                        AS bgn             /* 생년월일           */
               ,HP                                         AS hp              /* 휴대폰             */
               ,CD_TEL                               	   AS cd_tel    	  /* 통신사구분 	    */
               ,KCB_CI                                     AS kcb_ci          /* KCBCI              */
               ,KCB_DI                                     AS kcb_di          /* KCBDI              */
               ,KCB_CP                                     AS kcb_cp          /* KCBCP              */
               ,PBL_CERT_CI                                AS pbl_cert_ci     /* 공인인증CI         */
               ,PBL_CERT_DI                                AS pbl_cert_di     /* 공인인증DI         */
               ,YN_USE                                     AS yn_use          /* 사용여부           */
               ,YN_AGREE_USING                             AS yn_agree_using  /* 약관동의           */
               ,DT_AGREE_USING                             AS dt_agree_using  /* 약관동의일자       */
               ,DT_INSTALL                                 AS dt_install      /* 설치일자           */
               ,YN_FINGERPRINT                             AS yn_fingerprint  /* 지문사용여부       */
               ,YN_OS                                      AS yn_os           /* 운영체제여부       */
               ,FCM_TOKEN                                  AS fcm_token       /* 푸쉬메세지토큰     */
               ,CD_PUSH                                    AS cd_push         /* push msg여부       */
               ,YN_PUSH                                    AS yn_push         /* 푸쉬메세지사용여부 */
               ,EMAIL                                      AS email           /* 이메일             */
               ,NICK                                       AS nick            /* 별명               */
               ,YN_LOGOUT                                  AS yn_logout       /* 로그아웃여부       */
               ,SEQ_NEW_DEBT_REG                           AS seq_new_debt_reg/* 부채등록번호       */
               ,PATH_FILE1                                 AS path_file1      /* 파일패스           */
               ,NM_FILE1                                   AS nm_file1        /* 파일명             */
               ,STOCK_TOKEN                                AS stock_token     /* 증권토큰           */
               ,ETC_MEMO                                   AS etc_memo        /* 비고               */
               ,AMT_ETM_INCOME                             AS amt_etm_income  /* 추정소득금액       */
               ,NVL(CNT_FAIL_PWD, '0')                     AS cnt_fail_pwd	  /* 비밀번호 실패건수  */
               ,NVL(CNT_FAIL_FINGER, '0')                  AS cnt_fail_finger /* 지문인증 실패건수  */
               ,ID_FRT                                     AS id_frt          /* 최초입력아이디     */
               ,DT_FRT                                     AS dt_frt          /* 최초입력시간       */
               ,ID_LST                                     AS id_lst          /* 최종수정아이디     */
               ,DT_LST                                     AS dt_lst          /* 최종수정시간       */
          FROM PERSON_INFO /* 회원관리 */
         WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </select>

    <update id="modifyPwdFailCnt" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.modifyPwdFailCnt */
        UPDATE PERSON_INFO
        SET
				  ID_LST  		= #{id_lst, jdbcType=VARCHAR}
				, DT_LST  		= SYSDATE
        <if test='@com.koscom.util.MybatisUtil@isNotEmpty(cnt_fail_mode)'>
			<choose>
				<when test='"pwd"   .equals(cnt_fail_mode)'>
					,CNT_FAIL_PWD = #{cnt_fail, jdbcType=NUMERIC}
			    </when>
			    <when test='"finger"   .equals(cnt_fail_mode)'>
					,CNT_FAIL_FINGER = #{cnt_fail, jdbcType=NUMERIC}
			    </when>
          		<otherwise>
          			, CNT_FAIL_PWD = #{cnt_fail, jdbcType=NUMERIC}
          			, CNT_FAIL_FINGER = #{cnt_fail, jdbcType=NUMERIC}
            	</otherwise>
            </choose>
        </if>
        WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </update>

    <select id="getPwdDB" parameterType="java.lang.String" resultType="java.lang.String">
    	/* com.koscom.person.dao.PersonMapper.getPwdDB */
		SELECT XX1.ENC_VARCHAR2_INS(#{pwd, jdbcType=VARCHAR}, '11', 'FS_SHA', 'PERSON_INFO', 'PASS_PERSON') FROM DUAL
	</select>

	<select id="checkPersonPass" parameterType="com.koscom.person.model.PersonVO" resultType="int">
		/* com.koscom.person.dao.PersonMapper.checkPersonPass */
		SELECT COUNT(NO_PERSON)
		  FROM PERSON_INFO
		 WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
		   AND PASS_PERSON = XX1.ENC_VARCHAR2_INS(#{pass_person, jdbcType=VARCHAR}, '10', 'FS_SHA', 'PERSON_INFO', 'PASS_PERSON')
    </select>

	<select id="getYnAgreeUsingInfo" parameterType="java.lang.String" resultType="java.lang.String">
		/* com.koscom.person.dao.PersonMapper.getYnAgreeUsingInfo */
        SELECT YN_AGREE_USING FROM PERSON_INFO WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </select>

	<update id="modifyFcmToken" parameterType="com.koscom.person.model.PersonVO">
		/* com.koscom.person.dao.PersonMapper.modifyFcmToken */
        UPDATE PERSON_INFO
	        SET
	           FCM_TOKEN = #{fcm_token, jdbcType=VARCHAR}
	          ,YN_OS   = #{yn_os, jdbcType=VARCHAR}
	          ,CD_PUSH = '1'
	          ,YN_PUSH = 'Y'
	          ,ID_LST  = #{id_lst, jdbcType=VARCHAR}
	          ,DT_LST  = SYSDATE
        WHERE NO_PERSON = #{no_person}
    </update>

	<update id="modifyPassPerson" parameterType="com.koscom.domain.PersonInfo">
		/* com.koscom.person.dao.PersonMapper.modifyPassPerson */
        UPDATE PERSON_INFO
        SET
          PASS_PERSON = XX1.ENC_VARCHAR2_INS(#{pass_person, jdbcType=VARCHAR}, '12', 'FS_SHA', 'PERSON_INFO', 'PASS_PERSON')
        , CNT_FAIL_PWD = 0
        , ID_LST        = #{no_person, jdbcType=VARCHAR}
        , DT_LST        = SYSDATE
        WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </update>

    <update id="modifyLastLogin" parameterType="java.lang.String">
    	/* com.koscom.person.dao.PersonMapper.modifyLastLogin */
        UPDATE PERSON_INFO
           SET DT_LST = SYSDATE
         WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </update>

    <insert id="insertPersonLoginHist">
    	/* com.koscom.person.dao.PersonMapper.insertPersonLoginHist */
        INSERT INTO PERSON_LOGIN_HIST
            (     NO_PERSON
                , CD_SYSTEM
                , IP_CLIENT
                , USER_AGENT
                , ID_FRT
                , DT_FRT
            ) VALUES (
                  #{no_person, jdbcType=VARCHAR}
                , #{cd_system, jdbcType=VARCHAR}
                , #{ip_client, jdbcType=VARCHAR}
                , #{user_agent, jdbcType=VARCHAR}
                , #{no_person, jdbcType=VARCHAR}
                , SYSDATE
            )
    </insert>

    <select id="getPersonConnectTime" parameterType="java.lang.String" resultType="java.lang.String" >
        /* com.koscom.person.dao.PersonMapper.getPersonConnectTime */
		SELECT
			TB.DT_FRT
		FROM
			(
				SELECT
					TO_CHAR( DT_FRT, 'YYYY.MM.DD HH24:MI' ) AS DT_FRT
				FROM
					PERSON_LOGIN_HIST
				WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
				ORDER BY
					DT_FRT DESC
			) TB
		WHERE
			ROWNUM = 1
    </select>

    <insert id="insertActiveHist">
    	/* com.koscom.person.dao.PersonMapper.insertActiveHist */
        INSERT INTO PERSON_ACTIVE_HIST
            (     NO_PERSON
                , NM_DIR
                , NM_PAGE
                , ID_FRT
                , DT_FRT
                , ID_LST
                , DT_LST
            ) VALUES (
                  #{no_person, 	jdbcType=VARCHAR}
                , #{nm_dir, 	jdbcType=VARCHAR}
                , #{nm_page, 	jdbcType=VARCHAR}
                , #{id_frt, 	jdbcType=VARCHAR}
                , SYSDATE
                , #{id_lst, 	jdbcType=VARCHAR}
                , SYSDATE
            )
    </insert>

    <update id="modifyFingerPrint" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.modifyFingerPrint */
        UPDATE PERSON_INFO
	        SET
	          YN_FINGERPRINT = #{yn_fingerprint, jdbcType=VARCHAR}
			, ID_LST  		 = #{id_lst, jdbcType=VARCHAR}
			, DT_LST  		 = SYSDATE
        WHERE NO_PERSON  = #{no_person, jdbcType=VARCHAR}
    </update>

    <select id="getPersonEmail" parameterType="java.lang.String" resultType="java.lang.String" >
        /* com.koscom.person.dao.PersonMapper.getPersonConnectTime */
		SELECT
			EMAIL
		FROM PERSON_INFO
		WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </select>

    <update id="modifyPersonEmail" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.modifyPersonEmail */
        UPDATE PERSON_INFO
        SET
          EMAIL 	= #{email, jdbcType=VARCHAR}
		 , ID_LST  	= #{id_lst, jdbcType=VARCHAR}
		 , DT_LST  	= SYSDATE
        WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </update>

    <update id="modifyPersonLogout" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.modifyPersonLogout */
        UPDATE PERSON_INFO
        SET
           YN_LOGOUT 	= #{yn_logout, jdbcType=VARCHAR}
		 , ID_LST  		= #{id_lst, jdbcType=VARCHAR}
		 , DT_LST  		= SYSDATE
        WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </update>

	<update id="modifyPushNoti" parameterType="com.koscom.person.model.PersonVO">
		/* com.koscom.person.dao.PersonMapper.modifyPushNoti */
        UPDATE PERSON_INFO
        SET
        	  id_lst  		= #{id_lst, jdbcType=VARCHAR}
        	, dt_lst  		= SYSDATE
        	<if test="@com.koscom.util.MybatisUtil@isNotEmpty(type_push)">
        	    <if test='"default".equals(type_push)'>
				   , cd_push = '1'
				   , yn_push = 'Y'
				</if>
        	    <if test='"all".equals(type_push)'>
          			, cd_push = #{cd_push, jdbcType=VARCHAR}
          		</if>
                 <if test='"each".equals(type_push)'>
				   , yn_push = #{yn_push, jdbcType=VARCHAR}
				</if>
          	</if>
        WHERE NO_PERSON = #{no_person}
    </update>

    <insert id="insertCdPush" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.insertCdPush */
        INSERT INTO PUSH_SETTING_INFO
        	(
            	NO_PERSON
            	, CD_PUSH
            	, YN_PUSH
            	, ID_FRT
            	, DT_FRT
        	) VALUES (
            	#{no_person,jdbcType=VARCHAR}
            	, #{item_push,jdbcType=VARCHAR}
            	, #{stat_push,jdbcType=VARCHAR}
            	, #{id_frt,jdbcType=VARCHAR}
            	, SYSDATE
        	)
    </insert>

    <update id="modifyCdPush" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.modifyCdPush */
        MERGE INTO PUSH_SETTING_INFO
        USING DUAL
        ON (no_person = #{no_person, jdbcType=VARCHAR} AND CD_PUSH = #{item_push, jdbcType=VARCHAR})
        WHEN MATCHED THEN
        UPDATE
        SET
            YN_PUSH = #{stat_push}
        WHEN NOT MATCHED THEN
        INSERT(
            NO_PERSON
            , CD_PUSH
            , YN_PUSH
            , ID_FRT
            , DT_FRT
        ) VALUES (
            #{no_person,jdbcType=VARCHAR}
            , #{item_push,jdbcType=VARCHAR}
            , #{stat_push,jdbcType=VARCHAR}
            , #{no_person,jdbcType=VARCHAR}
            , SYSDATE
        )
    </update>

    <insert id="insertCdPushHist" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.insertCdPushHist */
	    <selectKey keyProperty="seq" resultType="string" order="BEFORE">
	        (SELECT NVL(MAX(seq),0)+1 FROM PUSH_SETTING_INFO_HIST)
	    </selectKey>
	    INSERT INTO PUSH_SETTING_INFO_HIST(
	        SEQ
	        , NO_PERSON
	        , CD_PUSH
	        , YN_PUSH
	        , ID_FRT
	        , DT_FRT
	    ) VALUES (
	        #{seq}
	        , #{no_person,jdbcType=VARCHAR}
	        , #{item_push,jdbcType=VARCHAR}
	        , #{stat_push,jdbcType=VARCHAR}
	        , #{id_frt,jdbcType=VARCHAR}
	        , SYSDATE
	    )
    </insert>

    <update id="modifyYnUseAndLogout" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.modifyYnUseAndLogout */
        UPDATE PERSON_INFO
        SET
          YN_LOGOUT 	= #{yn_logout, jdbcType=VARCHAR}
         , YN_USE 		= #{yn_use, jdbcType=VARCHAR}
		 , ID_LST  		= #{id_lst, jdbcType=VARCHAR}
		 , DT_LST  		= SYSDATE
        WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </update>

    <select id="getLastPersonSmsDt" parameterType="java.lang.String" resultType="java.lang.String">
    	/* com.koscom.person.dao.PersonMapper.getLastPersonSmsDt */
		SELECT TO_CHAR(MAX(DT_MSG), 'YYYYMMDDHH24MISS') MAX_DATE
		  FROM PERSON_SMS_LIST
		 WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
	</select>

	<insert id="createPersonSmsList" parameterType="com.koscom.person.model.PersonSmsListVO">
		/* com.koscom.person.dao.PersonMapper.createPersonSmsList */
		INSERT INTO PERSON_SMS_LIST
            (     NO_PERSON
				, SEQ
				, MSG_INFO
				, DT_MSG
				, ID_FRT
				, DT_FRT
            ) VALUES (
                  #{no_person, jdbcType=VARCHAR}
				, (SELECT NVL(MAX(SEQ),0)+1 FROM PERSON_SMS_LIST WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR})
				, #{msg_info, jdbcType=VARCHAR}
				, TO_DATE(#{dt_msg, jdbcType=VARCHAR},'YYYYMMDDHH24MISS')
                , #{id_frt, jdbcType=VARCHAR}
                , SYSDATE
            )
	</insert>

	<!-- 공유관리 -->
	<sql id="listPersonShareInfo_WHERE">
		<where>
		    CD_SHARE = #{cd_share, jdbcType=VARCHAR}
		    AND SHARE_STATUS = #{share_status, jdbcType=VARCHAR}
		    <if test="@com.koscom.util.MybatisUtil@isNotEmpty(type_list)">
				<if test='"req".equals(type_list)'>
					AND REQ_NO_PERSON = #{no_person, jdbcType=VARCHAR}
				</if>
				<if test='"offer".equals(type_list)'>
			   		AND OFFER_NO_PERSON = #{no_person, jdbcType=VARCHAR}
			  	</if>
			</if>
		</where>
	</sql>

	<!-- personMapper.listPersonShareInfo 공유관리list -->
	<select id="listPersonShareInfo" parameterType="com.koscom.person.model.PersonShareInfoForm" resultType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.listPersonShareInfo : 공유관리list */
	   	SELECT
			SEQ_SHARE,
			CD_SHARE,
			REQ_NO_PERSON,
			REQ_NM_PERSON,
			REQ_HP,
			OFFER_NO_PERSON,
			OFFER_NM_PERSON,
			OFFER_HP,
			SHARE_STATUS,
			RELATIONS,
			YN_CREDIT_INFO,
			YN_DEBT_INFO,
			YN_INCOME_INFO,
			YN_ASSET_INFO,
			YN_CONSUME_INFO,
			DT_STT_OFFER,
			DT_END_OFFER,
			ID_FRT,
			TO_CHAR(DT_FRT, 'YYYYMMDD') AS DT_FRT,
			ID_LST,
			TO_CHAR(DT_LST, 'YYYYMMDD') AS DT_LST
		FROM
			SHARE_INFO SI
		<include refid="listPersonShareInfo_WHERE"/>
		ORDER BY SI.DT_FRT DESC
	</select>

	<sql id="listPersonShareInfoHist_WHERE">
		<where>
		    CD_SHARE = #{cd_share, jdbcType=VARCHAR}
		    <if test="@com.koscom.util.MybatisUtil@isNotEmpty(type_list)">
				<if test='"req".equals(type_list)'>
					AND REQ_NO_PERSON = #{no_person, jdbcType=VARCHAR}
					AND (SHARE_STATUS = '04' OR SHARE_STATUS = '05')
				</if>
				<if test='"offer".equals(type_list)'>
			   		AND OFFER_NO_PERSON = #{no_person, jdbcType=VARCHAR}
			   		AND (SHARE_STATUS = '03' OR SHARE_STATUS = '04')
			  	</if>
			</if>
		</where>
	</sql>

	<!-- personMapper.listPersonShareInfoHist 공유관리HistoryList -->
	<select id="listPersonShareInfoHist" parameterType="com.koscom.person.model.PersonShareInfoForm" resultType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.listPersonShareInfoHist : 공유관리HistoryList */
	   	SELECT
			SEQ_SHARE,
			CD_SHARE,
			REQ_NO_PERSON,
			REQ_NM_PERSON,
			REQ_HP,
			OFFER_NO_PERSON,
			OFFER_NM_PERSON,
			OFFER_HP,
			SHARE_STATUS,
			RELATIONS,
			YN_CREDIT_INFO,
			YN_DEBT_INFO,
			YN_INCOME_INFO,
			YN_ASSET_INFO,
			YN_CONSUME_INFO,
			DT_STT_OFFER,
			DT_END_OFFER,
			ID_FRT,
			TO_CHAR(DT_FRT, 'YYYYMMDD') AS DT_FRT
		FROM
			SHARE_INFO_HIST SIH
		<include refid="listPersonShareInfoHist_WHERE"/>
		ORDER BY SIH.DT_FRT DESC
	</select>

	<!-- personMapper.listShareInfoAllCancel 공유관리 모두해지하기list -->
	<select id="listShareInfoAllCancel" parameterType="com.koscom.domain.PersonShareInfo" resultType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.listShareInfoAllCancel : 공유관리 모두해지하기list */
	    SELECT
			SEQ_SHARE,
			REQ_NO_PERSON,
			REQ_NM_PERSON,
			REQ_HP,
			OFFER_NO_PERSON,
			OFFER_NM_PERSON,
			OFFER_HP,
			SHARE_STATUS,
			YN_CREDIT_OFFER,
			YN_DEBT_OFFER,
			YN_INCOME_OFFER,
			YN_ACCOUNT_OFFER,
			YN_CARD_OFFER,
			YN_DEBT_ITGT_MNGM,
			YN_ASSET_ITGT_MNGM,
			YN_CONSUME_ITGT_MNGM,
			DT_STT_OFFER,
			DT_END_OFFER,
			ID_FRT,
			TO_CHAR(DT_FRT, 'YYYYMMDD') AS DT_FRT,
			ID_LST,
			TO_CHAR(DT_LST, 'YYYYMMDD') AS DT_LST
		FROM
			SHARE_INFO
		WHERE
			SHARE_STATUS = '02'
			AND OFFER_NO_PERSON = #{offer_no_person, jdbcType=NUMERIC}
	</select>

	<!-- personMapper.getPersonShareInfoHist 공유관리 hist정보 -->
	<select id="getPersonShareInfoHist" parameterType="com.koscom.domain.PersonShareInfo" resultType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.getPersonShareInfoHist : 공유관리 hist정보 */
	    SELECT
			SEQ_SHARE,
			CD_SHARE,
			REQ_NO_PERSON,
			REQ_NM_PERSON,
			REQ_HP,
			OFFER_NO_PERSON,
			OFFER_NM_PERSON,
			OFFER_HP,
			SHARE_STATUS,
			RELATIONS,
			YN_CREDIT_INFO,
			YN_DEBT_INFO,
			YN_INCOME_INFO,
			YN_ASSET_INFO,
			YN_CONSUME_INFO,
			DT_STT_OFFER,
			DT_END_OFFER,
			ID_FRT,
			TO_CHAR(DT_FRT, 'YYYYMMDD') AS DT_FRT
		FROM
			SHARE_INFO_HIST
		WHERE
			SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
			AND SHARE_STATUS = #{share_status, jdbcType=VARCHAR}
	</select>

	<!-- personMapper.getPersonShareInfo 공유관리 상세정보 -->
	<select id="getPersonShareInfo" parameterType="com.koscom.domain.PersonShareInfo" resultType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.getPersonShareInfo : 공유관리 상세정보 */
	    SELECT
			SEQ_SHARE,
			CD_SHARE,
			REQ_NO_PERSON,
			REQ_NM_PERSON,
			REQ_HP,
			OFFER_NO_PERSON,
			OFFER_NM_PERSON,
			OFFER_HP,
			SHARE_STATUS,
			RELATIONS,
			YN_CREDIT_INFO,
			YN_DEBT_INFO,
			YN_INCOME_INFO,
			YN_ASSET_INFO,
			YN_CONSUME_INFO,
			DT_STT_OFFER,
			DT_END_OFFER,
			ID_FRT,
			TO_CHAR(DT_FRT, 'YYYYMMDD') AS DT_FRT,
			ID_LST,
			TO_CHAR(DT_LST, 'YYYYMMDD') AS DT_LST
		FROM
			SHARE_INFO
		WHERE
			SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
	</select>

	<!-- personMapper.getPersonShareEtmInfo 공유관리 소득정보 -->
	<select id="getPersonShareEtmInfo" parameterType="com.koscom.domain.PersonShareInfo" resultType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.getPersonShareEtmInfo : 공유관리 소득정보 */
	    SELECT
			PEII.CD_ETM_BASIC,
			PEII.NM_ETM_BASIC,
			PEII.STD_YEAR,
			PEII.AMT_ETM_INCOME
		FROM
			(
				SELECT
					CD_ETM_BASIC,
					DECODE(CD_ETM_BASIC, '10','건강보험','20','국민연급','30','KCB','40','국세청') AS NM_ETM_BASIC,
					STD_YEAR,
					FN_AMT_VIEW(AMT_ETM_INCOME) AS AMT_ETM_INCOME
				FROM
					PERSON_ETM_INCOME_INFO
				WHERE
					NO_PERSON = #{offer_no_person, jdbcType=NUMERIC}
				ORDER BY
					STD_YEAR DESC,
					AMT_ETM_INCOME DESC
			) PEII
		WHERE
			ROWNUM = 1
	</select>

	<!-- personMapper.listPersonShareInfoAsset 공유관리 - 공유설정(자산정보 계좌list) -->
	<select id="listPersonShareInfoAsset" parameterType="com.koscom.domain.PersonShareInfo" resultType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.listPersonShareInfoAsset : 공유관리 - 공유설정(자산정보 계좌list) */
	    SELECT
	    	ROWNUM AS RNUM,
			SID.YN_SHARE,
			TB.CD_ASSETS_CLASS,
	    	TB.NO_ACCOUNT,
	    	TB.NM_ACCOUNT
	    FROM (
	    		SELECT
					AI.CD_ASSETS_CLASS,
					AI.NO_ACCOUNT,
					AI.NM_ACCOUNT
				FROM
					ASSETS_INFO AI
				WHERE (AI.DT_EXPIRE IS NULL OR AI.DT_EXPIRE <![CDATA[>=]]> TO_CHAR(SYSDATE,'YYYYMMDD'))
					AND AI.YN_DELETE = 'N'
					AND AI.CD_ASSETS_CLASS = '00'
					AND AI.NO_PERSON = #{offer_no_person, jdbcType=VARCHAR}
				UNION ALL
				SELECT
					AI.CD_ASSETS_CLASS,
					AI.NO_ACCOUNT,
					( (SELECT NM_FC FROM FC_INFO WHERE CD_FC = SL.CD_FC) || ' - '
					|| C.NM_CODE || ' (' || SL.REAL_ACCNO || ')' ) AS NM_ACCOUNT
				FROM
					ASSETS_INFO AI
				INNER JOIN STOCK_LIST SL
				ON (SL.NO_PERSON = AI.NO_PERSON
					AND SL.ACCNO = AI.NO_ACCOUNT)
				INNER JOIN
				(
				SELECT
					CODE_VALUE,
					NM_CODE,
					ETC
				FROM
					COMM_CD
				WHERE
					CODE_GROUP = 'cd_assets_stock'
				) C
				ON SL.ACC_TYPE = TO_CHAR(C.ETC)
				WHERE (AI.DT_EXPIRE IS NULL OR AI.DT_EXPIRE <![CDATA[>=]]> TO_CHAR(SYSDATE,'YYYYMMDD'))
					AND AI.YN_DELETE = 'N'
					AND AI.CD_ASSETS_CLASS = '10'
					AND AI.NO_PERSON = #{offer_no_person, jdbcType=VARCHAR}
				ORDER BY CD_ASSETS_CLASS, NM_ACCOUNT
			) TB
		LEFT OUTER JOIN SHARE_INFO_DETAIL SID
		ON (
			SID.SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
			AND SID.CD_INFO = '02'
			AND SID.CD_TYPE = TB.CD_ASSETS_CLASS
			AND SID.NO_CARD_ACC = TB.NO_ACCOUNT
			AND SID.ID_FRT = #{offer_no_person, jdbcType=VARCHAR}
			)
	</select>

	<!-- personMapper.listPersonShareInfoConsume 공유관리 - 공유설정(소비정보 계좌list) -->
	<select id="listPersonShareInfoConsume" parameterType="com.koscom.domain.PersonShareInfo" resultType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.listPersonShareInfoConsume : 공유관리 - 공유설정(소비정보 계좌list) */
	    SELECT
			ROWNUM AS RNUM,
			TB.YN_SHARE,
			TB.NM_CODE,
			TB.CODE_VALUE,
			TB.NO_CARD,
			TB.NM_CARD
		FROM (
				SELECT
					ASD.YN_SHARE,
					A.NM_CODE,
					A.CODE_VALUE,
					'' AS NO_CARD,
					'' AS NM_CARD
				FROM
					COMM_CD A
				LEFT OUTER JOIN SHARE_INFO_DETAIL ASD
				ON (
						ASD.SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
						AND ASD.CD_INFO = '03'
						AND A.CODE_VALUE = ASD.CD_TYPE
						AND ASD.ID_FRT = #{offer_no_person, jdbcType=VARCHAR}
					)
				WHERE
					A.CODE_GROUP = 'cd_consume'
					AND (A.CODE_VALUE = '02' OR A.CODE_VALUE = '03')
				UNION ALL
					SELECT
						BSD.YN_SHARE,
						B.NM_CODE,
						B.CODE_VALUE,
						B.NO_CARD,
						B.NM_CARD
					FROM(
						SELECT
							(SELECT NM_CODE FROM COMM_CD WHERE CODE_GROUP = 'cd_consume' AND CODE_VALUE='01') AS NM_CODE,
							'01' AS CODE_VALUE,
							NO_CARD,
							NM_CARD
						FROM
							SCR_CARD_INFO
						WHERE
							YN_DELETE = 'N'
							AND NO_PERSON = #{offer_no_person, jdbcType=VARCHAR}
					UNION ALL
						SELECT
							(SELECT NM_CODE FROM COMM_CD WHERE CODE_GROUP = 'cd_consume' AND CODE_VALUE='04') AS NM_CODE,
							'04' AS CODE_VALUE,
							AN AS NO_CARD,
							NM_AN AS NM_CARD
						FROM
							SCR_BANK_API_AN_INFO
						WHERE
							YN_DELETE = 'N'
							AND NO_PERSON = #{offer_no_person, jdbcType=VARCHAR}
							AND TYPE_AN = '01'
					) B
				LEFT OUTER JOIN SHARE_INFO_DETAIL BSD
				ON (
						BSD.SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
						AND BSD.CD_INFO = '03'
						AND B.CODE_VALUE = BSD.CD_TYPE
						AND B.NO_CARD = BSD.NO_CARD_ACC
						AND BSD.ID_FRT = #{offer_no_person, jdbcType=VARCHAR}
					)
			) TB
			ORDER BY TB.NM_CODE
	</select>

	<!-- personMapper.listPersonShareInfoDebt 공유관리 - 공유설정(부채정보 계좌list) -->
	<select id="listPersonShareInfoDebt" parameterType="com.koscom.domain.PersonShareInfo" resultType="com.koscom.domain.PersonShareInfo">
	    /* com.koscom.person.dao.PersonMapper.listPersonShareInfoDebt : 공유관리 - 공유설정(대출정보 계좌list) */
		SELECT
			ROWNUM AS RNUM,
			TB.YN_SHARE,
			TB.NO_MANAGE_INFO,
			TB.CD_FC,
			TB.NM_FC,
			TB.DEBT_TYPE,
			TB.AMT_REMAIN
		FROM (
				SELECT
					SID.YN_SHARE,
					A.NO_MANAGE_INFO,
					A.CD_FC,
					B.NM_FC,
					CASE
						WHEN A.YN_CREDIT = 'Y'
							AND A.CD_TYPE_DEAL IN('1','2','3') THEN '신용'
						WHEN A.YN_LOAN = 'Y'
							AND A.CD_TYPE_DEAL IN('1','2','3') THEN '담보'
						WHEN A.CD_TYPE_DEAL IN('4','5','6') THEN '카드론'
						ELSE ''
					END
					|| CASE
						WHEN A.CD_TYPE_DEAL IN('1','4') THEN '(분할)'
						WHEN A.CD_TYPE_DEAL IN('2','5') THEN '(일시)'
						WHEN A.CD_TYPE_DEAL IN('3','6') THEN '(한도)'
						WHEN A.CD_TYPE_DEAL IN('A') THEN '리스'
						ELSE ''
					END AS DEBT_TYPE,
					A.AMT_REMAIN
				FROM
					DEBT_PERSONAL_INFO A
				LEFT OUTER JOIN FC_INFO B
				ON ( B.CD_FC = A.CD_FC )
				LEFT OUTER JOIN SHARE_INFO_DETAIL SID
				ON (
						SID.SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
						AND SID.CD_INFO = '01'
						AND A.NO_MANAGE_INFO = SID.NO_MANAGE_INFO
						AND A.NO_PERSON = SID.ID_FRT
					)
				WHERE
					A.YMD_CANCEL IS NULL
					AND A.DISPLAY_YN = 'Y'
					AND A.NO_PERSON = #{offer_no_person, jdbcType=VARCHAR}
				ORDER BY
					(
						CASE WHEN A.CD_TYPE_DEAL NOT IN('3','6') THEN 1
						ELSE 2
						END
					),
					(
						CASE
							WHEN A.AMT_REMAIN = '-' THEN 0
							ELSE TO_NUMBER( A.AMT_REMAIN )
						END
					) DESC
			) TB
	</select>

	<!-- personMapper.createPersonShareInfo 공유관리 요청 -->
	<select id="duplPersonShareInfo" parameterType="com.koscom.domain.PersonShareInfo" resultType="int">
		/* com.koscom.person.dao.PersonMapper.duplPersonShareInfo : 공유관리 요청체크  */
	    SELECT
			COUNT( SEQ_SHARE ) AS SHARE_CNT
		FROM
			SHARE_INFO
		WHERE
			(
				SHARE_STATUS = '01'
				OR SHARE_STATUS = '02'
			)
			AND CD_SHARE = #{cd_share, jdbcType=VARCHAR}
			AND REQ_NO_PERSON = #{req_no_person, jdbcType=VARCHAR}
			AND OFFER_HP = #{offer_hp, jdbcType=VARCHAR}
	</select>
	<select id="getPersonShareInfoSeq" resultType="String">
		SELECT
			SEQ_SHARE_INFO.NEXTVAL
		FROM
			DUAL
	</select>
	<insert id="createPersonShareInfo" parameterType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.createPersonShareInfo : 공유관리 요청  */
		INSERT INTO SHARE_INFO(
			SEQ_SHARE,
			CD_SHARE,
			REQ_NO_PERSON,
			REQ_NM_PERSON,
			REQ_HP,
			OFFER_NO_PERSON,
			OFFER_NM_PERSON,
			OFFER_HP,
			SHARE_STATUS,
			RELATIONS,
			YN_CREDIT_INFO,
			YN_DEBT_INFO,
			YN_INCOME_INFO,
			YN_ASSET_INFO,
			YN_CONSUME_INFO,
			ID_FRT,
			DT_FRT,
			ID_LST,
			DT_LST
		) VALUES (
			#{seq_share, jdbcType=NUMERIC},
			#{cd_share, jdbcType=VARCHAR},
			#{req_no_person, jdbcType=VARCHAR},
			#{req_nm_person, jdbcType=VARCHAR},
			#{req_hp, jdbcType=VARCHAR},
			#{offer_no_person, jdbcType=VARCHAR},
			#{offer_nm_person, jdbcType=VARCHAR},
			#{offer_hp, jdbcType=VARCHAR},
			#{share_status, jdbcType=VARCHAR},
			#{relations, jdbcType=VARCHAR},
			#{yn_credit_info, jdbcType=VARCHAR},
			#{yn_debt_info, jdbcType=VARCHAR},
			#{yn_income_info, jdbcType=VARCHAR},
			#{yn_asset_info, jdbcType=VARCHAR},
			#{yn_consume_info, jdbcType=VARCHAR},
			#{id_frt, jdbcType=VARCHAR},
			SYSDATE,
			#{id_lst, jdbcType=VARCHAR},
			SYSDATE
		)
	</insert>

	<select id="chkPersonShareInfoReqCancel" parameterType="com.koscom.domain.PersonShareInfo" resultType="int">
	    SELECT
			COUNT(*) AS CHK_CNT
		FROM
			SHARE_INFO
		WHERE
			SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
			AND SHARE_STATUS = '05'
	</select>

	<!-- personMapper.updatePersonShareInfoSetStatus 공유관리 - 공유설정(상태변경) -->
	<update id="updatePersonShareInfoSetStatus" parameterType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.updatePersonShareInfoSetStatus : 공유관리 - 공유설정(상태변경) */
		UPDATE
			SHARE_INFO
		SET
			SHARE_STATUS = #{share_status, jdbcType=VARCHAR},
			<if test='"05".equals(share_status)'>
				<if test="@com.koscom.util.MybatisUtil@isNotEmpty(offer_no_person)">
					OFFER_NO_PERSON = #{offer_no_person, jdbcType=VARCHAR},
				    OFFER_NM_PERSON = #{offer_nm_person, jdbcType=VARCHAR},
				</if>
			</if>
			<if test='"04".equals(share_status)'>
				DT_END_OFFER = TO_CHAR(SYSDATE, 'YYYYMMDD'),
			</if>
			ID_LST = #{id_lst, jdbcType=VARCHAR},
			DT_LST = SYSDATE
		WHERE
			SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
	</update>

	<!-- personMapper.updatePersonShareInfoSetStatus 공유관리 - 공유설정(계좌추가) -->
	<delete id="deletePsersonShareInfoDetail" parameterType="com.koscom.domain.PersonShareInfo">
	    /* com.koscom.person.dao.PersonMapper.deletePsersonShareInfoDetail : 공유관리 - 공유설정(계좌삭제) */
		DELETE FROM SHARE_INFO_DETAIL
		WHERE SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
	</delete>
	<insert id="createPersonShareInfoDetail" parameterType="com.koscom.domain.PersonShareInfo">
	    /* com.koscom.person.dao.PersonMapper.createPersonShareInfoDetail : 공유관리 - 공유설정(계좌추가) */
		INSERT INTO SHARE_INFO_DETAIL(
			SEQ_SHARE,
			CD_INFO,
			CD_TYPE,
			NO_MANAGE_INFO,
			NO_CARD_ACC,
			YN_SHARE,
			ID_FRT,
			DT_FRT,
			ID_LST,
			DT_LST
		) VALUES (
			#{seq_share, jdbcType=NUMERIC},
			#{cd_info, jdbcType=VARCHAR},
			#{cd_type, jdbcType=VARCHAR},
			#{no_manage_info, jdbcType=VARCHAR},
			#{no_card_acc, jdbcType=VARCHAR},
			#{yn_share, jdbcType=VARCHAR},
			#{id_frt, jdbcType=VARCHAR},
			SYSDATE,
			#{id_lst, jdbcType=VARCHAR},
			SYSDATE
		)
	</insert>

	<!-- personMapper.updatePersonShareInfoSetItems 공유관리 - 공유설정(항목변경) -->
	<update id="updatePersonShareInfoSetItems" parameterType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.updatePersonShareInfoSetItems : 공유관리 - 공유설정(항목변경) */
		UPDATE
			SHARE_INFO
		SET
			<if test='"02".equals(share_status)'>
				SHARE_STATUS = #{share_status, jdbcType=VARCHAR},
				DT_STT_OFFER = TO_CHAR(SYSDATE, 'YYYYMMDD'),
			</if>
			YN_CREDIT_INFO = #{yn_credit_info, jdbcType=VARCHAR},
			YN_DEBT_INFO = #{yn_debt_info, jdbcType=VARCHAR},
			YN_INCOME_INFO = #{yn_income_info, jdbcType=VARCHAR},
			YN_ASSET_INFO = #{yn_asset_info, jdbcType=VARCHAR},
			YN_CONSUME_INFO = #{yn_consume_info, jdbcType=VARCHAR},
			ID_LST = #{id_lst, jdbcType=VARCHAR},
			DT_LST = SYSDATE
		WHERE
			SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
	</update>

	<!-- personMapper.updatePersonShareInfoSet01 공유관리 공유설정(공유재요청) -->
	<update id="updatePersonShareInfoSet01" parameterType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.updatePersonShareInfoSet01 : 공유관리 공유설정(공유재요청) */
		UPDATE
			SHARE_INFO
		SET
			<if test="@com.koscom.util.MybatisUtil@isNotEmpty(offer_no_person)">
				OFFER_NO_PERSON = #{offer_no_person, jdbcType=VARCHAR},
				OFFER_NM_PERSON = #{offer_nm_person, jdbcType=VARCHAR},
			</if>
			YN_CREDIT_OFFER = #{yn_credit_offer, jdbcType=VARCHAR},
			YN_DEBT_OFFER = #{yn_debt_offer, jdbcType=VARCHAR},
			YN_INCOME_OFFER = #{yn_income_offer, jdbcType=VARCHAR},
			YN_ACCOUNT_OFFER = #{yn_account_offer, jdbcType=VARCHAR},
			YN_CARD_OFFER = #{yn_card_offer, jdbcType=VARCHAR},
			YN_DEBT_ITGT_MNGM = #{yn_debt_itgt_mngm, jdbcType=VARCHAR},
			YN_ASSET_ITGT_MNGM = #{yn_asset_itgt_mngm, jdbcType=VARCHAR},
			YN_CONSUME_ITGT_MNGM = #{yn_consume_itgt_mngm, jdbcType=VARCHAR},
			ID_LST = #{id_lst, jdbcType=VARCHAR},
			DT_LST = SYSDATE
		WHERE
			SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
	</update>

	<!-- personMapper.updatePersonShareInfoSet02 공유관리 공유설정(허용/거절) -->
	<update id="updatePersonShareInfoSet02" parameterType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.updatePersonShareInfoSet02 : 공유관리 공유설정(허용/거절) */
		UPDATE
			SHARE_INFO
		SET
			SHARE_STATUS = #{share_status, jdbcType=VARCHAR},
			<if test='"02".equals(share_status)'> <!-- 허용시 정보제공시작일 입력 -->
				DT_STT_OFFER = TO_CHAR(SYSDATE, 'YYYYMMDD'),
				<if test="@com.koscom.util.MybatisUtil@isNotEmpty(yn_offer)"> <!-- 허용시, 정보제공항목이있는경우에만 정보제공종료일 입력 -->
					<if test='"Y".equals(yn_offer)'>
						DT_END_OFFER = TO_CHAR(SYSDATE, 'YYYYMMDD'),
					</if>
				</if>
			</if>
			ID_LST = #{id_lst, jdbcType=VARCHAR},
			DT_LST = SYSDATE
		WHERE
			SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
	</update>

	<!-- personMapper.updatePersonShareInfoSet03 공유관리 공유설정(변경/해지) -->
	<update id="updatePersonShareInfoSet03" parameterType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.updatePersonShareInfoSet03 : 공유관리 공유설정(변경/해지) */
		UPDATE
			SHARE_INFO
		SET
			SHARE_STATUS = #{share_status, jdbcType=VARCHAR},
			<if test='"02".equals(share_status)'> <!-- 변경시 항목변경됨 -->
			YN_CREDIT_OFFER = #{yn_credit_offer, jdbcType=VARCHAR},
			YN_DEBT_OFFER = #{yn_debt_offer, jdbcType=VARCHAR},
			YN_INCOME_OFFER = #{yn_income_offer, jdbcType=VARCHAR},
			YN_ACCOUNT_OFFER = #{yn_account_offer, jdbcType=VARCHAR},
			YN_CARD_OFFER = #{yn_card_offer, jdbcType=VARCHAR},
			YN_DEBT_ITGT_MNGM = #{yn_debt_itgt_mngm, jdbcType=VARCHAR},
			YN_ASSET_ITGT_MNGM = #{yn_asset_itgt_mngm, jdbcType=VARCHAR},
			YN_CONSUME_ITGT_MNGM = #{yn_consume_itgt_mngm, jdbcType=VARCHAR},
			</if>
			ID_LST = #{id_lst, jdbcType=VARCHAR},
			DT_LST = SYSDATE
		WHERE
			SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
	</update>

	<!-- personMapper.createPersonShareInfoHist 공유관리 이력생성 -->
	<insert id="createPersonShareInfoHist" parameterType="com.koscom.domain.PersonShareInfo">
	    /* com.koscom.person.dao.PersonMapper.createPersonShareInfoHist : 공유관리 이력생성  */
		INSERT INTO SHARE_INFO_HIST(
			SEQ_SHARE,
			CD_SHARE,
			REQ_NO_PERSON,
			REQ_NM_PERSON,
			REQ_HP,
			OFFER_NO_PERSON,
			OFFER_NM_PERSON,
			OFFER_HP,
			SHARE_STATUS,
			RELATIONS,
			YN_CREDIT_INFO,
			YN_DEBT_INFO,
			YN_INCOME_INFO,
			YN_ASSET_INFO,
			YN_CONSUME_INFO,
			DT_STT_OFFER,
			DT_END_OFFER,
			ID_FRT,
			DT_FRT
		) VALUES (
			#{seq_share, jdbcType=NUMERIC},
			#{cd_share, jdbcType=VARCHAR},
			#{req_no_person, jdbcType=VARCHAR},
			#{req_nm_person, jdbcType=VARCHAR},
			#{req_hp, jdbcType=VARCHAR},
			#{offer_no_person, jdbcType=VARCHAR},
			#{offer_nm_person, jdbcType=VARCHAR},
			#{offer_hp, jdbcType=VARCHAR},
			#{share_status, jdbcType=VARCHAR},
			#{relations, jdbcType=VARCHAR},
			#{yn_credit_info, jdbcType=VARCHAR},
			#{yn_debt_info, jdbcType=VARCHAR},
			#{yn_income_info, jdbcType=VARCHAR},
			#{yn_asset_info, jdbcType=VARCHAR},
			#{yn_consume_info, jdbcType=VARCHAR},
			#{dt_stt_offer, jdbcType=VARCHAR},
			#{dt_end_offer, jdbcType=VARCHAR},
			#{id_frt, jdbcType=VARCHAR},
			SYSDATE
		)
	</insert>

	<!-- personMapper.chkPersonShareInfoMessageTerm 공유관리 메세지발송 기간체크 -->
	<select id="chkPersonShareInfoMessageTerm" parameterType="com.koscom.domain.PersonShareMessageInfo" resultType="int">
		/* com.koscom.person.dao.PersonMapper.chkPersonShareInfoMessageTerm : 공유관리 메세지발송 기간체크  */
	    SELECT
			COUNT(*) AS CHK_CNT
		FROM
			SHARE_MESSAGE_INFO
		WHERE
			DT_REQ = TO_CHAR( SYSDATE, 'YYYYMMDD' )
			AND SEQ_SHARE = #{seq_share, jdbcType=NUMERIC}
			AND CD_MESSAGE = #{cd_message, jdbcType=VARCHAR}
	</select>

	<!-- personMapper.mergePersonShareInfoMessage 공유관리 메세지merge -->
	<update id="mergePersonShareInfoMessage" parameterType="com.koscom.domain.PersonShareMessageInfo">
		/* com.koscom.person.dao.PersonMapper.mergePersonShareInfoMessage : 공유관리 메세지merge */
		MERGE INTO SHARE_MESSAGE_INFO
			USING DUAL
			ON ( SEQ_SHARE = #{seq_share, jdbcType=NUMERIC} )
			WHEN MATCHED THEN
			UPDATE SET
				REQ_STATUS = #{req_status, jdbcType=VARCHAR},
				<choose>
				<when test='"02".equals(req_status)'>
					RES_MESSAGE = #{res_message, jdbcType=VARCHAR},
				</when>
				<otherwise>
				    DT_REQ = TO_CHAR(SYSDATE, 'YYYYMMDD'),
					TYPE_MESSAGE = #{type_message, jdbcType=VARCHAR},
					CD_MESSAGE = #{cd_message, jdbcType=VARCHAR},
					REQ_MESSAGE = #{req_message, jdbcType=VARCHAR},
					RES_MESSAGE = ' ',
				</otherwise>
				</choose>
				ID_LST = #{id_lst, jdbcType=VARCHAR},
				DT_LST = SYSDATE
			WHEN NOT MATCHED THEN
				INSERT
					(
						SEQ_SHARE,
						TYPE_MESSAGE,
						CD_MESSAGE,
						REQ_STATUS,
						DT_REQ,
						REQ_MESSAGE,
						ID_FRT,
						DT_FRT,
						ID_LST,
						DT_LST
					)
				VALUES(
					#{seq_share, jdbcType=NUMERIC},
					#{type_message, jdbcType=VARCHAR},
					#{cd_message, jdbcType=VARCHAR},
					#{req_status, jdbcType=VARCHAR},
					TO_CHAR(SYSDATE, 'YYYYMMDD'),
					#{req_message, jdbcType=VARCHAR},
					#{id_frt, jdbcType=VARCHAR},
					SYSDATE,
					#{id_lst, jdbcType=VARCHAR},
					SYSDATE
				)
	</update>

	<!-- personMapper.listPersonShareInfoReqUpdate 업데이트요청List -->
	<select id="listPersonShareInfoReqUpdate" parameterType="com.koscom.domain.PersonShareInfo" resultType="com.koscom.domain.PersonShareInfo">
		/* com.koscom.person.dao.PersonMapper.listPersonShareInfoReqUpdate : 업데이트요청List */
	    SELECT
			SI.SEQ_SHARE,
			SI.REQ_NO_PERSON,
			SI.REQ_NM_PERSON,
			SI.OFFER_NM_PERSON,
			SI.OFFER_NO_PERSON
		FROM
			SHARE_MESSAGE_INFO SMI
		INNER JOIN SHARE_INFO SI ON
			SMI.SEQ_SHARE = SI.SEQ_SHARE
		WHERE
			SMI.CD_MESSAGE = '02'
			AND SMI.REQ_STATUS = '01'
			AND SI.OFFER_NO_PERSON = #{offer_no_person, jdbcType=VARCHAR}
	</select>

	<select id="getPersonInfoDupCi" parameterType="com.koscom.person.model.PersonVO" resultType="java.lang.String">
		SELECT NO_PERSON
			FROM PERSON_INFO
		WHERE
				KCB_CI = #{kcb_ci, jdbcType=VARCHAR}
		  AND	YN_USE = 'Y'
	</select>

	<update id="modifyPersonHp" parameterType="com.koscom.person.model.PersonVO">
		UPDATE PERSON_INFO SET
			HP = #{hp, jdbcType=VARCHAR}
		WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
	</update>

	<select id="getPersonInfoDup" parameterType="com.koscom.person.model.PersonVO" resultType="com.koscom.person.model.PersonVO">
        SELECT
        	NO_PERSON
			, YN_USE
        FROM PERSON_INFO
         WHERE NO_PERSON = #{nm_person, jdbcType=VARCHAR} AND HP = #{hp, jdbcType=VARCHAR}
    </select>

    <insert id="insertPerson">
        <selectKey keyProperty="no_person" resultType="string" order="BEFORE">
            (SELECT 'P'||LPAD(SEQ_PERSON_NO.NEXTVAL,9,'0') FROM DUAL)
        </selectKey>
        INSERT INTO person_info
            (     no_person
                , nm_person
                , bgn
                , cd_tel
                , hp
                , yn_use
                , yn_agree_using
                , dt_agree_using
                , yn_push
                , kcb_ci
                , kcb_di
                , kcb_cp
                , cnt_fail_pwd
                , cnt_fail_finger
                , id_frt
                , dt_frt
                , id_lst
                , dt_lst
            ) VALUES (
                  #{no_person}
                , #{nm_person, jdbcType=VARCHAR}
                , #{bgn, jdbcType=VARCHAR}
                , #{telComCd, jdbcType=VARCHAR}
                , #{hp, jdbcType=VARCHAR}
                , 'Y'
                , 'Y'
                , SYSDATE
                , 'Y'
                , #{kcb_ci, jdbcType=VARCHAR}
                , #{kcb_di, jdbcType=VARCHAR}
                , #{kcb_cp, jdbcType=VARCHAR}
                , 0
                , 0
                , #{no_person}
                , SYSDATE
                , #{no_person}
                , SYSDATE
            )
    </insert>

    <insert id="createPersonCertificateInfo" parameterType="com.koscom.person.model.PersonCertificateInfoVO">
		MERGE INTO PERSON_CERTIFICATE_INFO
        USING DUAL
        ON (no_person = #{no_person, jdbcType=VARCHAR}
        	AND CN = #{cn, jdbcType=VARCHAR})
        WHEN MATCHED THEN
        UPDATE
         SET
          CERTIFICATE_AGENCY  = #{certificate_agency,jdbcType=VARCHAR}
        , DT_EXPIRE           = #{dt_expire         ,jdbcType=VARCHAR}
        , YN_USE              = #{yn_use            ,jdbcType=VARCHAR}
        , ID_FRT              = #{id_frt            ,jdbcType=VARCHAR}
        , DT_FRT              = SYSDATE
        WHEN NOT MATCHED THEN
        INSERT
        (
         NO_PERSON
        ,SEQ
        ,CN
        ,CERTIFICATE_AGENCY
        ,DT_EXPIRE
        ,YN_USE
        ,ID_FRT
        ,DT_FRT
        )
        VALUES(
          #{no_person     ,jdbcType=VARCHAR}
        , (SELECT NVL(MAX(SEQ),0)+1 FROM PERSON_CERTIFICATE_INFO
			WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR})
        , #{cn                ,jdbcType=VARCHAR}
        , #{certificate_agency,jdbcType=VARCHAR}
        , #{dt_expire         ,jdbcType=VARCHAR}
        , #{yn_use            ,jdbcType=VARCHAR}
        , #{id_frt            ,jdbcType=VARCHAR}
        , SYSDATE
        )
	</insert>

	<select id="getPushSettingInfo" parameterType="java.lang.String" resultType="com.koscom.person.model.PersonVO">
        SELECT
            CD_PUSH AS ITEM_PUSH
            , YN_PUSH
        FROM PUSH_SETTING_INFO
        WHERE
            NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </select>

    <select id="procPersonInfoDelQuit" parameterType="String" resultType="int">
        SELECT FN_PERSON_QUIT( #{no_person, jdbcType=VARCHAR} ) FROM DUAL
    </select>

    <insert id="createPersonQuit">
        INSERT INTO person_quit_hist
            (
                    no_person
                    , nm_person
                    , bgn
                    , hp
                    , dt_quit
                    , id_frt
                    , dt_frt
            )
            VALUES (
                    #{no_person, jdbcType=VARCHAR}
                    , #{nm_person, jdbcType=VARCHAR}
                    , #{bgn, jdbcType=VARCHAR}
                    , #{hp, jdbcType=VARCHAR}
                    , SYSDATE
                    , #{id_frt, jdbcType=VARCHAR}
                    , SYSDATE
            )
    </insert>

	<select id="chkPersonSetExist" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT
			COUNT( 1 )
		FROM
			PERSON_SET_INFO
		WHERE
			NO_PERSON = #{no_person, jdbcType = VARCHAR}
	</select>
    <insert id="insertDefaultPersonSet" parameterType="java.lang.String">
		INSERT
			INTO
				PERSON_SET_INFO(
					 NO_PERSON
					,DT_BASIC
					,YN_INSTALLMENT
					,ID_FRT
					,DT_FRT
					,ID_LST
					,DT_LST
				)
			VALUES(
				 #{no_person, jdbcType = VARCHAR}
				,'1'
				,'N'
				,#{no_person, jdbcType = VARCHAR}
				,SYSDATE
				,#{no_person, jdbcType = VARCHAR}
				,SYSDATE
			)
    </insert>
</mapper>
