<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.koscom.scrapData.dao.AssetsDataMapper">

    <!-- 금융사 계좌정보 스크래핑 조회 -->
	<select id="listScrBankApiAnInfo" parameterType="com.koscom.scrapData.model.AssetsDataForm" resultType="com.koscom.scrapData.model.AssetsInfoDataVO">
		SELECT
			NO_PERSON,
			AN,
			CD_FC,
			TYPE_AN,
			NM_AN,
			CD_CURRENCY,
			PRINCIPAL,
			AMT_AVAILABLE,
			CURRENT_BALANCE,
			LOAN_BALANCE,
			LOAN_CEILING,
			DT_NEW,
			DT_END,
			INTEREST_RATE,
			PROFIT_RATE,
			FEW_DAYS,
			INTEREST_DATE,
			YN_DELETE,
			DT_FRT
		FROM
			SCR_BANK_API_AN_INFO
		WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
	</select>

	<!-- 증권사 API 조회 -->
	<select id="listStockApiInfo" parameterType="com.koscom.scrapData.model.AssetsDataForm" resultType="com.koscom.scrapData.model.AssetsInfoDataVO">
		SELECT
			C.CODE_VALUE AS CD_DETAIL_CLASS,
			SS.CD_FC,
			SS.ACCNO,
			NVL(SS.CASHBALANCE, 0) AS CASHBALANCE,
			NVL(SS.TOTALACCVAL, 0) AS TOTALACCVAL,
			CASE WHEN SS.VALATTRADE > 0 THEN ROUND((SS.PROLOSS / SS.VALATTRADE) * 100, 2)
      		ELSE 0 END AS RATE_RETURN,
			SL.YN_DELETE
		FROM
			STOCK_SUMMARY SS
		INNER JOIN STOCK_LIST SL
		ON (
				SS.NO_PERSON = SL.NO_PERSON
				AND SS.CD_FC = SL.CD_FC
				AND SS.ACCNO = SL.ACCNO
			)
		INNER JOIN(
				SELECT
					CODE_VALUE,
					TRIM( SUBSTR( NM_CODE, 0, INSTR( NM_CODE, ' ', 1, 1 ))) AS NM_CODE
				FROM
					COMM_CD
				WHERE
					CODE_GROUP = 'cd_assets_stock'
			) C
		ON SL.ACC_TYPE = C.NM_CODE
		WHERE SS.NO_PERSON = #{no_person, jdbcType=VARCHAR}
	</select>

	<insert id="mergeAssetsInfo" parameterType="com.koscom.scrapData.model.AssetsInfoDataVO">
		MERGE INTO ASSETS_INFO
		USING DUAL
        ON (
        	NO_PERSON = #{no_person, jdbcType=VARCHAR}
        	AND CD_FC = #{cd_fc, jdbcType=VARCHAR}
        	AND NO_ACCOUNT = #{no_account, jdbcType=VARCHAR}
        	)
		WHEN MATCHED THEN
		UPDATE SET
			CD_ASSETS_CLASS = #{cd_assets_class, jdbcType=VARCHAR},
			CD_DETAIL_CLASS = #{cd_detail_class, jdbcType=VARCHAR},
			NM_ACCOUNT = #{nm_account, jdbcType=VARCHAR},
			DT_OPEN = #{dt_open, jdbcType=VARCHAR},
			DT_EXPIRE = #{dt_expire, jdbcType=VARCHAR},
			AMT_BALANCE = #{amt_balance, jdbcType=VARCHAR},
			AMT_EVALUATION = #{amt_evaluation, jdbcType=VARCHAR},
			INTEREST = #{interest, jdbcType=VARCHAR},
			RATE_RETURN = #{rate_return, jdbcType=VARCHAR},
			YN_DELETE = #{yn_delete, jdbcType=VARCHAR},
			YN_PERSON_REGIST = #{yn_person_regist, jdbcType=VARCHAR},
			ID_LST = #{id_lst, jdbcType=VARCHAR},
			DT_LST = SYSDATE
		WHEN NOT MATCHED THEN
		INSERT
			(
				NO_PERSON,
				CD_ASSETS_CLASS,
				CD_DETAIL_CLASS,
				CD_FC,
				NO_ACCOUNT,
				NM_ACCOUNT,
				DT_OPEN,
				DT_EXPIRE,
				AMT_BALANCE,
				AMT_EVALUATION,
				INTEREST,
				RATE_RETURN,
				YN_DELETE,
				YN_PERSON_REGIST,
				ID_FRT,
				DT_FRT,
				ID_LST,
				DT_LST
			) VALUES (
				#{no_person, jdbcType=VARCHAR},
				#{cd_assets_class, jdbcType=VARCHAR},
				#{cd_detail_class, jdbcType=VARCHAR},
				#{cd_fc, jdbcType=VARCHAR},
				#{no_account, jdbcType=VARCHAR},
				#{nm_account, jdbcType=VARCHAR},
				#{dt_open, jdbcType=VARCHAR},
				#{dt_expire, jdbcType=VARCHAR},
				#{amt_balance, jdbcType=VARCHAR},
				#{amt_evaluation, jdbcType=VARCHAR},
				#{interest, jdbcType=VARCHAR},
				#{rate_return, jdbcType=VARCHAR},
				#{yn_delete, jdbcType=VARCHAR},
				#{yn_person_regist, jdbcType=VARCHAR},
				#{id_frt, jdbcType=VARCHAR},
				SYSDATE,
				#{id_lst, jdbcType=VARCHAR},
				SYSDATE
		)
	</insert>
</mapper>
