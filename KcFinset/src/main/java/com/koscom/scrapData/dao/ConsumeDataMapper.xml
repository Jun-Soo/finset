<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.koscom.scrapData.dao.ConsumeDataMapper">
	<select id="getDtFromCashReceipt" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT
			NVL(TO_CHAR( MAX( TO_NUMBER( DT_TRD || TM_TRD ))), '00000000000000')
		FROM
			CONSUME_INFO
		WHERE
				NO_PERSON		= #{no_person, jdbcType = VARCHAR}
			AND MEANS_CONSUME	= '03'
	</select>
	<select id="getDtFromTransaction" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT
			NVL(TO_CHAR( MAX( TO_NUMBER( DT_TRD || TM_TRD ))), '00000000000000')
		FROM
			CONSUME_INFO
		WHERE
				NO_PERSON		= #{no_person, jdbcType = VARCHAR}
			AND MEANS_CONSUME	= '04'
	</select>
	<!-- 소비지출 테이블(CONSUME_INFO)에 데이터를 쌓기 위해 카드 승인 내역(SCR_CARD_APPROVAL_INFO)에서 데이터를 가져옴 -->
	<select id="listScrCardApprovalInfo" parameterType="com.koscom.scrapData.model.ConsumeDataForm" resultType="hashmap">
		SELECT
			 A.NO_PERSON
			,A.CD_FC
			,A.DT_APPROVAL
			,A.TM_APPROVAL
			,A.NO_APPROVAL
			,A.TYPE_CARD
			,A.NO_CARD
			,C.NM_CARD
			,A.NM_MEMBER
			,A.TYPE_SALES
			,A.PERIOD_INSTALLMENT
			,A.AMT_APPROVAL
			,A.YMD_CANCEL
			,A.DT_PAYMENT_DUE
			,A.NO_BIZ_MEMBER
			,A.CD_BIZ_MEMBER
			,A.TYPE_BIZ_MEMBER
			,A.CD_CURRENCY
			,A.CD_IN_OUT
			,A.DT_FRT
			,FN_CD_CONSUME_CLASS_TMP
				(
					A.NO_PERSON,
					A.CD_FC,
					A.NO_CARD,
					A.NM_MEMBER,
					A.NO_BIZ_MEMBER,
					A.TYPE_BIZ_MEMBER
				) AS CD_CONSUME_CLASS
		FROM
			SCR_CARD_APPROVAL_INFO A
		LEFT OUTER JOIN(
				SELECT
					 B.CD_FC
					,MAX( TO_NUMBER( B.DT_TRD || B.TM_TRD )) AS TRD
				FROM
					CONSUME_INFO B
				WHERE
						B.NO_PERSON		= #{no_person, jdbcType = VARCHAR}
					AND B.MEANS_CONSUME = '01'
					AND B.MON_REMAINING = '0'
				GROUP BY
					B.CD_FC
			) B ON
			A.CD_FC = B.CD_FC
		LEFT JOIN SCR_CARD_INFO C ON
				A.NO_PERSON				= C.NO_PERSON
			AND A.CD_FC					= C.CD_FC
			AND SUBSTR(A.NO_CARD,-3)	= SUBSTR(C.NO_CARD, -3)
		WHERE
				A.NO_PERSON = #{no_person, jdbcType = VARCHAR}
			AND A.DT_APPROVAL || A.TM_APPROVAL <![CDATA[>]]> CASE WHEN B.TRD IS NULL THEN 0 ELSE B.TRD END
	</select>
<!-- 소비지출 테이블(CONSUME_INFO)에 데이터를 쌓기 위해 현금영수증 사용내역(SCR_RESP_CASH_RECEIPT)에서 데이터를 가져옴 -->
	<select id="listScrRespCashReceipt" parameterType="com.koscom.scrapData.model.ConsumeDataForm"  resultType="hashmap">
		SELECT
			 NO_PERSON
			,CD_FC
			,YMD_DEAL
			,TIME_DEAL
			,NM_AFFILIATE
			,AMT_USE
			,NO_APPROVAL
			,TYPE_ID_CHECK
			,TYPE_DEAL
			,YN_DEDUCTION
			,TYPE_ISSUE
			,DT_FRT
			,FN_CD_CONSUME_CLASS_TMP
				(
					NO_PERSON,
					CD_FC,
					NULL,
					NM_AFFILIATE,
					NULL,
					NULL
				) AS CD_CONSUME_CLASS
		FROM
			SCR_RESP_CASH_RECEIPT,
			(
				SELECT
					CD_FC
				FROM
					FC_INFO
				WHERE
					NM_FC = '국세청'
			)
		WHERE
				NO_PERSON = #{no_person, jdbcType=VARCHAR}
			AND TO_NUMBER(CONCAT(TO_CHAR(YMD_DEAL),TO_CHAR(TIME_DEAL))) <![CDATA[>]]> TO_NUMBER(#{dt_from, jdbcType=VARCHAR})
	</select>
<!-- 	기존 소비지출내역에서 설정된 소비 항목코드 조회 -->
	<select id="getCdConsumeClassConsume" parameterType="com.koscom.scrapData.model.ConsumeDataVO" resultType="java.lang.String">
		SELECT
			CD_CLASS || CD_TYPE AS CD_CONSUME_CLASS
		FROM
			(
				SELECT
					CD_CLASS,
					CD_TYPE
				FROM
					CONSUME_INFO
				WHERE
						NO_PERSON			= #{no_person	, jdbcType=VARCHAR}
					AND CD_FC				= #{cd_fc		, jdbcType=VARCHAR}
					AND NVL(NO_CARD, '-')	= NVL(#{no_card	, jdbcType=VARCHAR}, '-')
					AND CONTENTS			= #{contents	, jdbcType=VARCHAR}
				GROUP BY
					CD_CLASS,
					CD_TYPE
				ORDER BY
					COUNT( 1 ) DESC
			)
		WHERE
			ROWNUM = 1
	</select>
<!-- 	가맹점명과 사업자번호로 소비항목코드 조회 -->
	<select id="getCdConsumeClassBizMember" parameterType="com.koscom.scrapData.model.ConsumeDataVO" resultType="java.lang.String">
		SELECT
			CD_CONSUME_CLASS
		FROM
			BIZ_MEMBER_INFO
		WHERE
				NM_MEMBER		= #{contents	, jdbcType=VARCHAR}
			AND NO_BIZ_MEMBER	= NVL(#{no_biz	, jdbcType=VARCHAR}, '-')
	</select>
<!-- 업종명으로 소비항목코드를 가져옴 -->
	<select id="getCdConsumeClassBizType" parameterType="com.koscom.scrapData.model.ConsumeDataVO" resultType="java.lang.String">
		SELECT CD_CONSUME_CLASS
			FROM BUSINESS_TYPE_INFO
		WHERE 
				CD_FC							= #{cd_fc, jdbcType=VARCHAR}
			AND REPLACE(NM_BUSINESS, ' ', '')	= REPLACE(#{nm_biz, jdbcType=VARCHAR}, ' ', '')
	</select>
<!-- 	소비지출 데이터 insert -->
	<insert id="createConsumeInfo" parameterType="com.koscom.scrapData.model.ConsumeDataVO">
		<selectKey keyProperty="seq_consume" resultType="java.lang.Integer" order="BEFORE">
			(SELECT NVL(MAX(SEQ_CONSUME),0)+1 FROM CONSUME_INFO WHERE NO_PERSON = #{no_person, jdbcType = VARCHAR})
		</selectKey>
			INSERT INTO CONSUME_INFO(
				 NO_PERSON
				,SEQ_CONSUME
				,TYPE_IN_OUT
				,MEANS_CONSUME
				,CD_FC
				,NM_CARD
				,NO_CARD
				,TYPE_CARD
				,DT_TRD
				,TM_TRD
				,NO_BIZ
				,NM_BIZ
				,CD_CLASS
				,CD_TYPE
				,CONTENTS
				,MEMO
				,GRADE
				,AMT_IN_OUT
				,NO_APPROVAL
				,MON_INSTALLMENT
				,MON_REMAINING
				,YN_PAY_INSTALLMENT
				,YN_CANCEL
				,YN_DELETE
				,YN_AUTO
				,YN_BUDGET_EXCEPT
				,YN_PERSON_REGIST
				,SEQ_TRAN
				,ID_FRT
				,DT_FRT
				,ID_LST
				,DT_LST
				)
			VALUES(
				 #{no_person			, jdbcType = VARCHAR}
				,#{seq_consume			, jdbcType = VARCHAR}
				,#{type_in_out			, jdbcType = VARCHAR}
				,#{means_consume		, jdbcType = VARCHAR}
				,#{cd_fc				, jdbcType = VARCHAR}
				,#{nm_card				, jdbcType = VARCHAR}
				,#{no_card				, jdbcType = VARCHAR}
				,#{type_card			, jdbcType = VARCHAR}
				,#{dt_trd				, jdbcType = VARCHAR}
				,#{tm_trd				, jdbcType = VARCHAR}
				,#{no_biz				, jdbcType = VARCHAR}
				,#{nm_biz				, jdbcType = VARCHAR}
				,#{cd_class				, jdbcType = VARCHAR}
				,#{cd_type				, jdbcType = VARCHAR}
				,#{contents				, jdbcType = VARCHAR}
				,#{memo					, jdbcType = VARCHAR}
				,#{grade				, jdbcType = VARCHAR}
				,#{amt_in_out			, jdbcType = VARCHAR}
				,#{no_approval			, jdbcType = VARCHAR}
				,#{mon_installment		, jdbcType = VARCHAR}
				,#{mon_remaining		, jdbcType = VARCHAR}
				,#{yn_pay_installment	, jdbcType = VARCHAR}
				,#{yn_cancel			, jdbcType = VARCHAR}
				,#{yn_delete			, jdbcType = VARCHAR}
				,#{yn_auto				, jdbcType = VARCHAR}
				,#{yn_budget_except		, jdbcType = VARCHAR}
				,#{yn_person_regist		, jdbcType = VARCHAR}
				,#{seq_tran				, jdbcType = VARCHAR}
				,#{id_frt				, jdbcType = VARCHAR}
				,SYSDATE
				,#{id_lst				, jdbcType = VARCHAR}
				,SYSDATE
			)
	</insert>
	<select id="listScrTransactionDetailAuto" parameterType="com.koscom.scrapData.model.ConsumeDataForm" resultType="hashmap">
		SELECT
			 TO_CHAR(STI.SEQ_TRAN) AS SEQ_TRAN
			,STI.NO_PERSON
			,STI.AN
			,STI.DT_TRD
			,STI.TM_TRD
			,STI.CD_CRNCY
			,STI.AMT_WDRL
			,STI.AMT_DEP
			,STI.BALANCE
			,STI.DOC1
			,STI.DOC2
			,STI.DEALWAY1
			,STI.DEALWAY2
			,STI.DT_FRT
			,CI.CD_CLASS
			,CI.CD_TYPE
			,BAAI.CD_FC
			,BAAI.NM_AN
		FROM
			 SCR_TRANSACTION_DETAIL STI
			,(
				SELECT
					 NO_PERSON
					,NO_CARD
					,CONTENTS
					,MAX( DT_FRT ) AS DT_FRT
					,CD_CLASS
					,CD_TYPE
				FROM
					CONSUME_INFO
				WHERE
						NO_PERSON	= #{no_person, jdbcType = VARCHAR}
					AND YN_AUTO		= 'Y'
					AND 1 = (
						CASE
							WHEN YN_PAY_INSTALLMENT = 'N' THEN 1
							WHEN YN_PAY_INSTALLMENT = 'Y' AND MON_REMAINING = '0' THEN 1
							ELSE 0
						END
					)
				GROUP BY
					 NO_PERSON
					,NO_CARD
					,CONTENTS
					,CD_CLASS
					,CD_TYPE
			) CI
			,(
				SELECT
					 CD_FC
					,AN
					,NM_AN
				FROM SCR_BANK_API_AN_INFO
				WHERE
					NO_PERSON = #{no_person, jdbcType = VARCHAR}
			) BAAI
		WHERE
				STI.NO_PERSON					=	 #{no_person, jdbcType = VARCHAR}
			AND STI.AN							=	 CI.NO_CARD
			AND	STI.AN							=	 BAAI.AN
			AND
				(
				   STI.DOC1						=	 CI.CONTENTS
				OR STI.DOC2						=	 CI.CONTENTS
				)
			AND TO_NUMBER( STI.DT_TRD || STI.TM_TRD )<![CDATA[>]]> TO_NUMBER( #{dt_from, jdbcType = VARCHAR} )
	</select>
	<select id="listScrTransactionDetailIncome" parameterType="com.koscom.scrapData.model.ConsumeDataForm" resultType="hashmap">
		SELECT
			 TO_CHAR(STI.SEQ_TRAN) AS SEQ_TRAN
			,STI.NO_PERSON
			,STI.AN
			,STI.DT_TRD
			,STI.TM_TRD
			,STI.CD_CRNCY
			,STI.AMT_WDRL
			,STI.AMT_DEP
			,STI.BALANCE
			,STI.DOC1
			,STI.DOC2
			,STI.DEALWAY1
			,STI.DEALWAY2
			,STI.DT_FRT
			,PCCI.CD_CLASS
			,PCCI.CD_TYPE
			,BAAI.CD_FC
			,BAAI.NM_AN
		FROM
			  SCR_TRANSACTION_DETAIL STI
			,(
				SELECT
					 NO_PERSON
					,MAX( DT_FROM ) AS DT_FROM
				FROM
					(
						SELECT
							 NO_PERSON
							,MAX( DT_TRD || TM_TRD ) AS DT_FROM
						FROM
							CONSUME_INFO
						WHERE
							NO_PERSON = #{no_person, jdbcType = VARCHAR}
						GROUP BY
							NO_PERSON
					UNION SELECT
							#{no_person, jdbcType = VARCHAR} AS NO_PERSON,
							'00000000000000'
						FROM
							DUAL
					)
				GROUP BY
					NO_PERSON
			 ) CI
			,(
				SELECT
					CD_FC,
					AN,
					NM_AN
				FROM
					SCR_BANK_API_AN_INFO
				WHERE
					NO_PERSON = #{no_person, jdbcType = VARCHAR}
			 ) BAAI
			,(
				SELECT
					 CASE
						WHEN ISEXIST = 0 THEN '99'
						ELSE '01'
					 END AS CD_CLASS
					,'000' AS CD_TYPE
				FROM
					(
						SELECT
							COUNT( 1 ) AS ISEXIST
						FROM
							PERSON_CONSUME_CLASS_INFO
						WHERE
								TYPE_IN_OUT			= '01'
							AND NO_PERSON			= #{no_person, jdbcType = VARCHAR}
							AND CD_CONSUME_CLASS	= '01000'
							AND YN_USE				= 'Y'
					)
			) PCCI
		WHERE
				STI.NO_PERSON					= #{no_person, jdbcType = VARCHAR}
			AND STI.AN							= BAAI.AN
			AND(
					REPLACE(STI.DOC1,' ','')	LIKE '%급여%'
				OR	REPLACE(STI.DOC2,' ','')	LIKE '%급여%'
			)
			AND STI.AMT_WDRL					= '0'
			AND STI.AMT_DEP						!= '0'
			<if test="@com.koscom.util.MybatisUtil@isNotEmpty(listSeqTranIncome)">
				AND STI.SEQ_TRAN					NOT IN
				<foreach item="each_seq_tran" collection="listSeqTranIncome" open="(" separator="," close=")">
					#{each_seq_tran}
				</foreach>
			</if>
			AND TO_NUMBER( STI.DT_TRD || STI.TM_TRD )<![CDATA[>]]> TO_NUMBER( #{dt_from, jdbcType = VARCHAR} )
	</select>
	<insert id="createBusinessTypeInfo" parameterType="com.koscom.scrapData.model.BusinessTypeInfoVO">
		INSERT INTO
			BUSINESS_TYPE_INFO(
				 CD_FC
				,NM_BUSINESS
				,CD_CONSUME_CLASS
				,ID_FRT
				,DT_FRT
				,ID_LST
				,DT_LST
			)
			VALUES(
				 #{cd_fc			, jdbcType = VARCHAR}
				,#{nm_business		, jdbcType = VARCHAR}
				,#{cd_consume_class	, jdbcType = VARCHAR}
				,#{id_frt			, jdbcType = VARCHAR}
				,SYSDATE
				,#{id_lst			, jdbcType = VARCHAR}
				,SYSDATE
			)
	</insert>
</mapper>
