<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.koscom.person.dao.PersonMapper">

	<select id="getPersonInfoHp" parameterType="String" resultType="com.koscom.person.model.PersonVO">
		/* com.koscom.person.dao.PersonMapper.getPersonInfoHp */
		SELECT *
		  FROM PERSON_INFO
		 WHERE HP = #{hp, jdbcType=VARCHAR}
	</select>
	
	<select id="getPersonInfo" parameterType="java.lang.String" resultType="com.koscom.person.model.PersonVO">
        /* com.koscom.person.dao.PersonMapper.getPersonInfo : 회원정보 */
        SELECT  NO_PERSON                                  AS no_person       /* 회원관리번호       */
               ,NM_PERSON                                  AS nm_person       /* 회원명             */
               ,XX1.DEC_VARCHAR2_SEL(SSN_PERSON, '10', 'FS_ARIA', 'PERSON_INFO', 'SSN_PERSON')   AS ssn_person      /* 주민번호           */
               ,PASS_PERSON                                AS pass_person     /* 패스워드           */
               ,BGN                                        AS bgn             /* 생년월일           */
               ,HP                                         AS hp              /* 휴대폰             */
               ,CD_TEL                               	   AS cd_tel    	  /* 통신사구분 	    */
               ,KCB_CI                                     AS kcb_ci          /* KCBCI              */
               ,KCB_DI                                     AS kcb_di          /* KCBDI              */
               ,KCB_CP                                     AS kcb_cp          /* KCBCP              */
               ,PBL_CERT_CI                                AS pbl_cert_ci     /* 공인인증CI         */
               ,PBL_CERT_DI                                AS pbl_cert_di     /* 공인인증DI         */
               ,YN_USE                                     AS yn_use          /* 사용여부           */
               ,YN_AGREE_USING                             AS yn_agree_using  /* 약관동의           */
               ,DT_AGREE_USING                             AS dt_agree_using  /* 약관동의일자       */
               ,DT_INSTALL                                 AS dt_install      /* 설치일자           */
               ,YN_FINGERPRINT                             AS yn_fingerprint  /* 지문사용여부       */
               ,YN_OS                                      AS yn_os           /* 운영체제여부       */
               ,FCM_TOKEN                                  AS fcm_token       /* 푸쉬메세지토큰     */
               ,CD_PUSH                                    AS cd_push         /* push msg여부       */
               ,YN_PUSH                                    AS yn_push         /* 푸쉬메세지사용여부 */
               ,EMAIL                                      AS email           /* 이메일             */
               ,NICK                                       AS nick            /* 별명               */
               ,YN_LOGOUT                                  AS yn_logout       /* 로그아웃여부       */
               ,SEQ_NEW_DEBT_REG                           AS seq_new_debt_reg/* 부채등록번호       */
               ,PATH_FILE1                                 AS path_file1      /* 파일패스           */
               ,NM_FILE1                                   AS nm_file1        /* 파일명             */
               ,STOCK_TOKEN                                AS stock_token     /* 증권토큰           */
               ,ETC_MEMO                                   AS etc_memo        /* 비고               */
               ,AMT_ETM_INCOME                             AS amt_etm_income  /* 추정소득금액       */
               ,NVL(CNT_FAIL_PWD, '0')                     AS cnt_fail_pwd	  /* 비밀번호 실패건수  */
               ,NVL(CNT_FAIL_FINGER, '0')                  AS cnt_fail_finger /* 지문인증 실패건수  */
               ,ID_FRT                                     AS id_frt          /* 최초입력아이디     */
               ,DT_FRT                                     AS dt_frt          /* 최초입력시간       */
               ,ID_LST                                     AS id_lst          /* 최종수정아이디     */
               ,DT_LST                                     AS dt_lst          /* 최종수정시간       */
          FROM PERSON_INFO /* 회원관리 */
         WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </select>
    
    <update id="modifyPwdFailCnt" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.modifyPwdFailCnt */
        UPDATE PERSON_INFO
        SET
				  ID_LST  		= #{id_lst, jdbcType=VARCHAR}
				, DT_LST  		= SYSDATE
        <if test='@com.koscom.util.MybatisUtil@isNotEmpty(cnt_fail_mode)'>
			<choose>
				<when test='"pwd"   .equals(cnt_fail_mode)'>
					,CNT_FAIL_PWD = #{cnt_fail, jdbcType=NUMERIC}
			    </when>
			    <when test='"finger"   .equals(cnt_fail_mode)'>
					,CNT_FAIL_FINGER = #{cnt_fail, jdbcType=NUMERIC}
			    </when>
          		<otherwise>
          			, CNT_FAIL_PWD = #{cnt_fail, jdbcType=NUMERIC}
          			, CNT_FAIL_FINGER = #{cnt_fail, jdbcType=NUMERIC}
            	</otherwise>
            </choose>
        </if>
        WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </update>
    
    <select id="getPwdDB" parameterType="java.lang.String" resultType="java.lang.String">
    	/* com.koscom.person.dao.PersonMapper.getPwdDB */
		SELECT XX1.ENC_VARCHAR2_INS(#{pwd, jdbcType=VARCHAR}, '11', 'FS_SHA', 'PERSON_INFO', 'PASS_PERSON') FROM DUAL
	</select>
	
	<select id="checkPersonPass" parameterType="com.koscom.person.model.PersonVO" resultType="int">
		/* com.koscom.person.dao.PersonMapper.checkPersonPass */
		SELECT COUNT(NO_PERSON)
		  FROM PERSON_INFO
		 WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
		   AND PASS_PERSON = XX1.ENC_VARCHAR2_INS(#{pass_person, jdbcType=VARCHAR}, '10', 'FS_SHA', 'PERSON_INFO', 'PASS_PERSON')
    </select>
	
	<select id="getYnAgreeUsingInfo" parameterType="java.lang.String" resultType="java.lang.String">
		/* com.koscom.person.dao.PersonMapper.getYnAgreeUsingInfo */
        SELECT YN_AGREE_USING FROM PERSON_INFO WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </select>
    
	<update id="modifyFcmToken" parameterType="com.koscom.person.model.PersonVO">
		/* com.koscom.person.dao.PersonMapper.modifyFcmToken */
        UPDATE PERSON_INFO
	        SET
	           FCM_TOKEN = #{fcm_token, jdbcType=VARCHAR}
	          ,YN_OS   = #{yn_os, jdbcType=VARCHAR}
	          ,CD_PUSH = '1'
	          ,YN_PUSH = 'Y'
	          ,ID_LST  = #{id_lst, jdbcType=VARCHAR}
	          ,DT_LST  = SYSDATE
        WHERE NO_PERSON = #{no_person}
    </update>
	
	<update id="modifyPassPerson" parameterType="com.koscom.domain.PersonInfo">
		/* com.koscom.person.dao.PersonMapper.modifyPassPerson */
        UPDATE PERSON_INFO
        SET
          PASS_PERSON = XX1.ENC_VARCHAR2_INS(#{pass_person, jdbcType=VARCHAR}, '12', 'FS_SHA', 'PERSON_INFO', 'PASS_PERSON')
        , CNT_FAIL_PWD = 0
        , ID_LST        = #{no_person, jdbcType=VARCHAR}
        , DT_LST        = SYSDATE
        WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </update>
    
    <update id="modifyLastLogin" parameterType="java.lang.String">
    	/* com.koscom.person.dao.PersonMapper.modifyLastLogin */
        UPDATE PERSON_INFO
           SET DT_LST = SYSDATE	
         WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </update>
    
    <insert id="insertPersonLoginHist">
    	/* com.koscom.person.dao.PersonMapper.insertPersonLoginHist */
        INSERT INTO PERSON_LOGIN_HIST
            (     NO_PERSON
                , CD_SYSTEM
                , IP_CLIENT
                , USER_AGENT
                , ID_FRT
                , DT_FRT
            ) VALUES (
                  #{no_person, jdbcType=VARCHAR}
                , #{cd_system, jdbcType=VARCHAR}
                , #{ip_client, jdbcType=VARCHAR}
                , #{user_agent, jdbcType=VARCHAR}
                , #{no_person, jdbcType=VARCHAR}
                , SYSDATE
            )
    </insert>
    
    <insert id="insertActiveHist">
    	/* com.koscom.person.dao.PersonMapper.insertActiveHist */
        INSERT INTO PERSON_ACTIVE_HIST
            (     NO_PERSON
                , NM_DIR
                , NM_PAGE
                , ID_FRT
                , DT_FRT
                , ID_LST
                , DT_LST
            ) VALUES (
                  #{no_person, 	jdbcType=VARCHAR}
                , #{nm_dir, 	jdbcType=VARCHAR}
                , #{nm_page, 	jdbcType=VARCHAR}
                , #{id_frt, 	jdbcType=VARCHAR}
                , SYSDATE
                , #{id_lst, 	jdbcType=VARCHAR}
                , SYSDATE
            )
    </insert>    
    
    <update id="modifyFingerPrint" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.modifyFingerPrint */
        UPDATE PERSON_INFO
	        SET
	          YN_FINGERPRINT = #{yn_fingerprint, jdbcType=VARCHAR}
			, ID_LST  		 = #{id_lst, jdbcType=VARCHAR}
			, DT_LST  		 = SYSDATE
        WHERE NO_PERSON  = #{no_person, jdbcType=VARCHAR}
    </update>
    
    <update id="modifyPersonEmail" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.modifyPersonEmail */
        UPDATE PERSON_INFO
        SET
          EMAIL 	= #{email, jdbcType=VARCHAR}
		 , ID_LST  	= #{id_lst, jdbcType=VARCHAR}
		 , DT_LST  	= SYSDATE
        WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </update>
    
    <update id="modifyPersonLogout" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.modifyPersonLogout */
        UPDATE PERSON_INFO
        SET
           YN_LOGOUT 	= #{yn_logout, jdbcType=VARCHAR}
		 , ID_LST  		= #{id_lst, jdbcType=VARCHAR}
		 , DT_LST  		= SYSDATE
        WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </update>
	
	<update id="modifyPushNoti" parameterType="com.koscom.person.model.PersonVO">
		/* com.koscom.person.dao.PersonMapper.modifyPushNoti */
        UPDATE PERSON_INFO
        SET
        	  id_lst  		= #{id_lst, jdbcType=VARCHAR}
        	, dt_lst  		= SYSDATE
        	<if test="@com.koscom.util.MybatisUtil@isNotEmpty(type_push)">
        	    <if test='"default".equals(type_push)'>
				   , cd_push = '1'
				   , yn_push = 'Y'
				</if>
        	    <if test='"all".equals(type_push)'>
          			, cd_push = #{cd_push, jdbcType=VARCHAR}
          		</if>
                 <if test='"each".equals(type_push)'>
				   , yn_push = #{yn_push, jdbcType=VARCHAR}
				</if>
          	</if>
        WHERE NO_PERSON = #{no_person}
    </update>

    <insert id="insertCdPush" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.insertCdPush */
        INSERT INTO PUSH_SETTING_INFO
        	(
            	NO_PERSON
            	, CD_PUSH
            	, YN_PUSH
            	, ID_FRT
            	, DT_FRT
        	) VALUES (
            	#{no_person,jdbcType=VARCHAR}
            	, #{item_push,jdbcType=VARCHAR}
            	, #{stat_push,jdbcType=VARCHAR}
            	, #{id_frt,jdbcType=VARCHAR}
            	, SYSDATE
        	)
    </insert>

    <update id="modifyCdPush" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.modifyCdPush */
        MERGE INTO PUSH_SETTING_INFO
        USING DUAL
        ON (no_person = #{no_person, jdbcType=VARCHAR} AND CD_PUSH = #{item_push, jdbcType=VARCHAR})
        WHEN MATCHED THEN
        UPDATE
        SET
            YN_PUSH = #{stat_push}
        WHEN NOT MATCHED THEN
        INSERT(
            NO_PERSON
            , CD_PUSH
            , YN_PUSH
            , ID_FRT
            , DT_FRT
        ) VALUES (
            #{no_person,jdbcType=VARCHAR}
            , #{item_push,jdbcType=VARCHAR}
            , #{stat_push,jdbcType=VARCHAR}
            , #{no_person,jdbcType=VARCHAR}
            , SYSDATE
        )
    </update>

    <insert id="insertCdPushHist" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.insertCdPushHist */
	    <selectKey keyProperty="seq" resultType="string" order="BEFORE">
	        (SELECT NVL(MAX(seq),0)+1 FROM PUSH_SETTING_INFO_HIST)
	    </selectKey>
	    INSERT INTO PUSH_SETTING_INFO_HIST(
	        SEQ
	        , NO_PERSON
	        , CD_PUSH
	        , YN_PUSH
	        , ID_FRT
	        , DT_FRT
	    ) VALUES (
	        #{seq}
	        , #{no_person,jdbcType=VARCHAR}
	        , #{item_push,jdbcType=VARCHAR}
	        , #{stat_push,jdbcType=VARCHAR}
	        , #{id_frt,jdbcType=VARCHAR}
	        , SYSDATE
	    )
    </insert>    
    
    <update id="modifyYnUseAndLogout" parameterType="com.koscom.person.model.PersonVO">
    	/* com.koscom.person.dao.PersonMapper.modifyYnUseAndLogout */
        UPDATE PERSON_INFO
        SET
          YN_LOGOUT 	= #{yn_logout, jdbcType=VARCHAR}
         , YN_USE 		= #{yn_use, jdbcType=VARCHAR}
		 , ID_LST  		= #{id_lst, jdbcType=VARCHAR}
		 , DT_LST  		= SYSDATE
        WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    </update>
    
    <select id="getLastPersonSmsDt" parameterType="java.lang.String" resultType="java.lang.String">
    	/* com.koscom.person.dao.PersonMapper.getLastPersonSmsDt */
		SELECT TO_CHAR(MAX(DT_MSG), 'YYYYMMDDHH24MISS') MAX_DATE
		  FROM PERSON_SMS_LIST
		 WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
	</select>
	
	<insert id="createPersonSmsList" parameterType="com.koscom.person.model.PersonSmsListVO">
		/* com.koscom.person.dao.PersonMapper.createPersonSmsList */
		INSERT INTO PERSON_SMS_LIST
            (     NO_PERSON
				, SEQ
				, MSG_INFO
				, DT_MSG
				, ID_FRT
				, DT_FRT
            ) VALUES (
                  #{no_person, jdbcType=VARCHAR}
				, (SELECT NVL(MAX(SEQ),0)+1 FROM PERSON_SMS_LIST WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR})
				, #{msg_info, jdbcType=VARCHAR}
				, TO_DATE(#{dt_msg, jdbcType=VARCHAR},'YYYYMMDDHH24MISS')
                , #{id_frt, jdbcType=VARCHAR}
                , SYSDATE
            )
	</insert>
	
	<!-- personMapper.createPersonShareInfoHist 공유관리 메세지merge -->
	<update id="mergePersonShareInfoMessage" parameterType="com.koscom.domain.PersonShareMessageInfo">
		/* com.koscom.person.dao.PersonMapper.mergePersonShareInfoMessage */
		MERGE INTO SHARE_MESSAGE_INFO
		USING DUAL
		ON ( SEQ_SHARE = #{seq_share, jdbcType=NUMERIC} )
		WHEN MATCHED THEN
		UPDATE SET
			REQ_STATUS = #{req_status, jdbcType=VARCHAR},
			<choose>
			<when test='"03".equals(req_status)'>
				RES_MESSAGE = #{res_message, jdbcType=VARCHAR},
			</when>
			<otherwise>
			    DT_REQ = TO_CHAR(SYSDATE, 'YYYYMMDD'),
				TYPE_MESSAGE = #{type_message, jdbcType=VARCHAR},
				CD_MESSAGE = #{cd_message, jdbcType=VARCHAR},
				REQ_MESSAGE = #{req_message, jdbcType=VARCHAR},
				RES_MESSAGE = ' ',
			</otherwise>
			</choose>
			ID_LST = #{id_lst, jdbcType=VARCHAR},
			DT_LST = SYSDATE
		WHEN NOT MATCHED THEN
			INSERT
				(
					SEQ_SHARE,
					TYPE_MESSAGE,
					CD_MESSAGE,
					REQ_STATUS,
					DT_REQ,
					REQ_MESSAGE,
					ID_FRT,
					DT_FRT,
					ID_LST,
					DT_LST
				)
			VALUES(
				#{seq_share, jdbcType=NUMERIC},
				#{type_message, jdbcType=VARCHAR},
				#{cd_message, jdbcType=VARCHAR},
				#{req_status, jdbcType=VARCHAR},
				TO_CHAR(SYSDATE, 'YYYYMMDD'),
				#{req_message, jdbcType=VARCHAR},
				#{id_frt, jdbcType=VARCHAR},
				SYSDATE,
				#{id_lst, jdbcType=VARCHAR},
				SYSDATE
			)
	</update>
	
	<!-- personMapper.listPersonShareInfoReqUpdate 업데이트요청List -->
	<select id="listPersonShareInfoReqUpdate" parameterType="com.koscom.person.model.PersonShareInfoVO" resultType="com.koscom.person.model.PersonShareInfoVO">
		/* com.koscom.person.dao.PersonMapper.listPersonShareInfoReqUpdate */
	    SELECT
			SI.SEQ_SHARE,
			SI.REQ_NO_PERSON,
			SI.REQ_NM_PERSON,
			SI.OFFER_NM_PERSON,
			SI.OFFER_NO_PERSON
		FROM
			SHARE_MESSAGE_INFO SMI
		INNER JOIN SHARE_INFO SI ON
			SMI.SEQ_SHARE = SI.SEQ_SHARE
		WHERE
			SMI.CD_MESSAGE = '02'
			AND SMI.REQ_STATUS = '01'
			AND SI.OFFER_NO_PERSON = #{offer_no_person, jdbcType=VARCHAR}
	</select>    
</mapper>
