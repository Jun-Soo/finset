<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.koscom.debt.dao.DebtMapper">

	<resultMap id="myMap" type="hashmap">
    </resultMap>

	<select id="listDebtCount"  parameterType="com.koscom.debt.model.DebtForm" resultType="int">
		select
		COUNT(*) AS recordCount
		from V_DEBT_M_LIST
		where seq_credit_info = (select max(seq) as seq_ from CREDIT_INFO where no_person = #{no_person} and nm_if = '300' )
	</select>

    <select id="getDebtExistYn" parameterType="java.lang.String" resultType="java.lang.String">
        /**
         * 부채관리 메뉴에 처음 접속했는지 체크 : 데이터가 없으면 처음접속한 것이다.
         */
        select decode(count(1),0,'N','Y') as DEPT_YN
          from DEBT_PERSONAL_INFO /* KCB 회원 계좌별 대출정보(KCB 추정DATA) */
         where no_person = #{no_person}
          and display_yn = 'Y' /* 20180619 김휘경 부채 삭제 확인*/
    </select>

    <select id="newDebtCount" parameterType="java.lang.String" resultType="int">
        /**
         * 등록할 부채수
         */
        select count(1) as CNT_DEPT
          from DEBT_PERSONAL_INFO /* KCB 회원 계좌별 대출정보(KCB 추정DATA) */
         where no_person = #{no_person}
           and DEBT_YN   = 'N'
    </select>

    <select id="getDebtYCount" parameterType="java.lang.String" resultType="int">
        /* com.koscom.debt.dao.DebtMapper.getDebtYCount : 등록된 부채수 */
        SELECT COUNT(1) as CNT_DEPT
          FROM DEBT_PERSONAL_INFO /* KCB 회원 계좌별 대출정보(KCB+추정DATA) */
         WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
           AND DEBT_YN   = 'Y'
    </select>

    <select id="getDebtCount" parameterType="java.lang.String" resultType="int">
        /* com.koscom.debt.dao.DebtMapper.getDebtYCount : 등록된 부채수 */
        SELECT COUNT(1) as CNT_DEPT
          FROM DEBT_PERSONAL_INFO /* KCB 회원 계좌별 대출정보(KCB+추정DATA) */
         WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
         AND DISPLAY_YN = 'Y' /* 삭제를 하지 않은 부채 수를 가져오기 위해 조건 추가 - 김휘경 */
         AND YMD_CANCEL IS NULL /* YMD_CANCEL 반영 - 김휘경 */
         
    </select>

    <select id="getDebtSummary" parameterType="java.lang.String" resultType="com.koscom.debt.model.DebtSummaryVO">
        /* com.koscom.debt.dao.DebtMapper.getDebtSummary : 대출 메인 요약 */
        SELECT    A.DT_STD               /* 기준일자 */
              ,A.CNT_LOAN               /* 대출건수 */
              ,FN_AMT_VIEW(SUM(CASE WHEN A.CD_TYPE_DEAL IN ('3','6') THEN 0 ELSE B.CUR_MON_MID_RPY END))         AS CUR_MON_MID_RPY      /* 당월 상환금액(한도대출제외)*/
              ,FN_AMT_VIEW(SUM(CASE WHEN A.CD_TYPE_DEAL IN ('3','6') THEN 0 ELSE B.CUR_MON_MID_RPY_P END))       AS CUR_MON_MID_RPY_P    /* 당월 상환원금(한도대출제외)*/
              ,FN_AMT_VIEW(SUM(CASE WHEN A.CD_TYPE_DEAL IN ('3','6') THEN 0 ELSE B.CUR_MON_MID_RPY_I END))       AS CUR_MON_MID_RPY_I    /* 이자금액(당월)(한도대출제외)*/
              ,FN_AMT_VIEW(A.SUM_AMT_REMAIN)                  AS AMT_REMAIN         /* 대출잔액*/
              ,ROUND((A.SUM_AMT_CONTRACT - A.SUM_AMT_REMAIN) / (CASE WHEN A.SUM_AMT_CONTRACT = 0 THEN 1 ELSE A.SUM_AMT_CONTRACT END),3)*100   AS RATE_AMT_CONTRACT    /* 상환비율(%)*/
              ,TO_DATE(A.MAX_YMD_LOANEND) - TO_DATE(A.MIN_YMD_LOAN)   AS ALL_REST_TERM   /* 상환기간*/
              ,SUBSTR (NUMTODSINTERVAL(TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD')||'235959','YYYYMMDDHH24MISS')-SYSDATE,'DAY'),12,8)   AS REST_TIME/* 잔여시간 */
              ,ROUND(SUM(
                     CASE
                        WHEN A.SUM_AMT_REMAIN2 != 0 AND A.CD_TYPE_DEAL NOT IN ('3','6') AND NVL(B.ETM_INTEREST,0) != 0 THEN
                            (A.AMT_REMAIN * B.ETM_INTEREST) / A.SUM_AMT_REMAIN2
                        ELSE
                            0
                     END
                 ),2)  										 AS EVER_INTEREST     /*  금리(평균) (%)-->SUM((대출정보.대출잔액 x 상세.추정금리)/잔액합계) */
              ,TO_CHAR(ROUND(SUM(
                    CASE
                         WHEN (B.CUR_MON_MID_RPY) != 0 AND A.CD_TYPE_DEAL NOT IN ('3','6') THEN
                         	(B.CUR_MON_MID_RPY_I)/(B.CUR_MON_MID_RPY) * 100
                         ELSE
                         	0
               		END
                 ),1),'990.9')                               AS RATE_REPAY         /* 이자상환비율(%) */
              ,MONTHS_BETWEEN(TO_DATE(SUBSTR(A.MAX_YMD_LOANEND,1,6),'YYYYMM'),TO_DATE(TO_CHAR(SYSDATE,'YYYYMM'),'YYYYMM'))
               	+	CASE
               			WHEN MIN(B.CUR_MM_MAX_INR_YMD) > TO_CHAR(SYSDATE,'YYYYMMDD') THEN 
               				1 
               			ELSE
               				0
               		END 									AS REST_TERM /* 만기상환까지 잔여기간(회차기준.오늘일자기준으로 이자납입일이 안지났으면 이번달도 포함한다.)*/
              ,MONTHS_BETWEEN(TO_DATE(SUBSTR(A.MAX_YMD_LOANEND,1,6),'YYYYMM'),TO_DATE(SUBSTR(A.MIN_YMD_LOAN,1,6),'YYYYMM')) AS LOAN_TERM /*대출기간*/
              ,A.MIN_YMD_LOAN            /* min 개설일*/
              ,A.MAX_YMD_LOANEND         /* max 만기일*/
              ,FN_AMT_VIEW(FN_ETM_INCOME_AMT(A.NO_PERSON)/12)   AS AMT_ETM_INCOME    /* 소득(월평균) */
              ,A.CNT
              ,CASE
                 WHEN FN_ETM_INCOME_AMT(A.NO_PERSON) = 0 THEN
                    0
                 ELSE
                    ROUND(SUM(CASE WHEN A.CD_TYPE_DEAL IN ('3','6') THEN 0 ELSE B.CUR_MON_MID_RPY END)/(FN_ETM_INCOME_AMT(A.NO_PERSON)/12),3) * 100
               END                                              AS REPAY_PNI_PER_INCOME
              ,TO_CHAR(SYSDATE,'MM')                            AS CUR_MONTH
              ,TO_CHAR(SYSDATE+1,'YYYYMMDD')                    AS NEXT_DAY
              ,(100 -
                ROUND((TO_DATE(A.MAX_YMD_LOANEND) - TO_DATE(TO_CHAR(SYSDATE,'YYYYMMDD'),'YYYYMMDD') - 1) / (TO_DATE(A.MAX_YMD_LOANEND) - TO_DATE(A.MIN_YMD_LOAN)),2)
                *100)                                 AS DUTATION_NOW_RATE
        FROM   (
                 SELECT A.NO_PERSON
                       ,A.NO_MANAGE_INFO
                       ,A.CD_TYPE_DEAL
                       ,MAX(A.DT_STD)         OVER(PARTITION BY A.NO_PERSON)         AS DT_STD
                       ,SUM(A.AMT_REMAIN)      OVER(PARTITION BY A.NO_PERSON)         AS SUM_AMT_REMAIN
                       ,SUM(A.AMT_CONTRACT)   OVER(PARTITION BY A.NO_PERSON)         AS SUM_AMT_CONTRACT
                       ,MIN(A.YMD_LOAN)      OVER(PARTITION BY A.NO_PERSON)         AS MIN_YMD_LOAN
                       ,MAX(A.YMD_LOANEND)      OVER(PARTITION BY A.NO_PERSON)         AS MAX_YMD_LOANEND
                       ,C.CNT_LOAN
                       ,COUNT(A.NO_MANAGE_INFO)OVER(PARTITION BY A.NO_PERSON)         AS CNT
                       ,A.AMT_CONTRACT
                       ,A.AMT_REMAIN
                       ,SUM(CASE WHEN A.CD_TYPE_DEAL NOT IN ('3','6') THEN TO_NUMBER(A.AMT_CONTRACT) ELSE 0 END) OVER(PARTITION BY A.NO_PERSON)   AS SUM_AMT_CONTRACT2
                       ,SUM(CASE WHEN A.CD_TYPE_DEAL NOT IN ('3','6') THEN TO_NUMBER(A.AMT_REMAIN) ELSE 0 END)   OVER(PARTITION BY A.NO_PERSON)   AS SUM_AMT_REMAIN2
                 FROM   DEBT_PERSONAL_INFO A
                       LEFT OUTER JOIN KCB_CREDIT_INFO C
                       ON   (
                          C.NO_PERSON   =   A.NO_PERSON
                       )
                 WHERE   A.NO_PERSON   = #{no_person , jdbcType=VARCHAR}
                 AND      A.YMD_CANCEL IS NULL
                 AND	  A.DISPLAY_YN = 'Y'	/*삭제처리를 위해 DISPLAY_YN이 추가되었기 때문에 조건이 추가됨 20180529 김휘경*/
              ) A
              LEFT OUTER JOIN (
                 SELECT    B.NO_PERSON
                       ,B.NO_MANAGE_INFO
                       ,SUM(CASE WHEN B.REQ_YYYYMM = TO_CHAR(SYSDATE,'YYYYMM') THEN TO_NUMBER(B.AMT_REPAY) ELSE 0 END)                    AS CUR_MON_MID_RPY
                       ,SUM(CASE WHEN B.REQ_YYYYMM = TO_CHAR(SYSDATE,'YYYYMM') THEN TO_NUMBER(B.AMT_REPAY_P) ELSE 0 END)                  AS CUR_MON_MID_RPY_P
                       ,SUM(CASE WHEN B.REQ_YYYYMM = TO_CHAR(SYSDATE,'YYYYMM') THEN TO_NUMBER(B.AMT_REPAY_I) ELSE 0 END)                  AS CUR_MON_MID_RPY_I
                       ,MAX(B.ETM_INTEREST) KEEP(DENSE_RANK FIRST 
                                                 ORDER BY CASE WHEN B.YN_KCB = 'Y' THEN 1 ELSE 2 END
                                                         ,CASE WHEN NVL(B.AMT_MID_REPAY,'0') = '0' THEN 1 ELSE 2 END
                                                         ,B.REQ_YYYYMM DESC) AS ETM_INTEREST
                       ,MAX(CASE WHEN B.REQ_YYYYMM = TO_CHAR(SYSDATE,'YYYYMM') THEN B.INTEREST_YMD ELSE '' END)  AS CUR_MM_MAX_INR_YMD
                 FROM   DEBT_PERSONAL_REPAY_LIST B
                 WHERE   B.NO_PERSON   = #{no_person, jdbcType=VARCHAR}
                 GROUP BY B.NO_PERSON
                       ,B.NO_MANAGE_INFO
              ) B
              ON   (
                 B.NO_PERSON         =   A.NO_PERSON
              AND B.NO_MANAGE_INFO   =   A.NO_MANAGE_INFO
              )
        GROUP BY A.NO_PERSON
              ,A.DT_STD
              ,A.CNT_LOAN
              ,A.MIN_YMD_LOAN
              ,A.MAX_YMD_LOANEND
              ,A.SUM_AMT_REMAIN
              ,A.SUM_AMT_CONTRACT
              ,A.CNT
    </select>

    <select id="listDebtPg" parameterType="com.koscom.debt.model.DebtForm" resultType="com.koscom.debt.model.DebtVO">
        /* com.koscom.debt.dao.DebtMapper.listDebtPg: 부채메인 리스트 */
        SELECT    A.NO_MANAGE_INFO
              ,B.PATH_FILE AS PATH_FILE1
              ,B.NM_FC
              ,A.CD_FC
              ,TO_CHAR(SYSDATE,'MM')                                        AS CUR_MONTH
              ,CASE
                 WHEN A.YN_CREDIT = 'Y' AND A.CD_TYPE_DEAL IN ('1','2','3') THEN '신용'
                 WHEN A.YN_LOAN   = 'Y' AND A.CD_TYPE_DEAL IN ('1','2','3') THEN '담보'
                 WHEN A.CD_TYPE_DEAL IN ('4','5','6') THEN '카드론'
                 ELSE ''
               END ||
               CASE
                  WHEN A.CD_TYPE_DEAL IN ('1','4') THEN '(분할)'
                  WHEN A.CD_TYPE_DEAL IN ('2','5') THEN '(일시)'
                  WHEN A.CD_TYPE_DEAL IN ('3','6') THEN '(한도)'
                  WHEN A.CD_TYPE_DEAL IN ('A') THEN '리스'
                  ELSE ''
               END                                                          AS DEBT_TYPE
              ,FN_AMT_VIEW(
                  CASE
                     WHEN A.CD_TYPE_DEAL IN ('3','6') THEN 0
                     ELSE C.CUR_MM_AMT_REPAY
                  END)                                                      AS AMT_REPAY   /* 당월 상환원리금*/
              ,FN_AMT_VIEW(
                  CASE
                     WHEN A.CD_TYPE_DEAL IN ('3','6') THEN 0
                     ELSE C.CUR_MM_AMT_REPAY_I
                  END)                                                      AS AMT_REPAY_I   /* 당월 상환이자*/
              ,FN_AMT_VIEW(
                  CASE
                     WHEN A.CD_TYPE_DEAL IN ('3','6') THEN 0
                     ELSE C.CUR_MM_AMT_REPAY_P
                  END)                                                      AS AMT_REPAY_P   /* 당월 상환원금*/
              ,FN_AMT_VIEW(A.AMT_REMAIN)                                    AS AMT_REMAIN
              ,CASE
                   WHEN A.AMT_REMAIN IS NULL OR A.AMT_CONTRACT IS NULL OR TO_NUMBER(A.AMT_CONTRACT) = 0 THEN
                      '-'
                   ELSE
                      TRIM(TO_CHAR(ROUND((TO_NUMBER(A.AMT_CONTRACT)-TO_NUMBER(A.AMT_REMAIN))/TO_NUMBER(A.AMT_CONTRACT)*100,1),'990.9'))
               END                                                          AS RATE_REPAY    /*원금상환비율*/
              ,CASE
                   WHEN C.CUR_MM_AMT_REPAY IS NULL OR TO_NUMBER(C.CUR_MM_AMT_REPAY) = 0 THEN
                      '-'
                   ELSE
                      TRIM(TO_CHAR(ROUND(TO_NUMBER(C.CUR_MM_AMT_REPAY_I)/TO_NUMBER(C.CUR_MM_AMT_REPAY)*100,1),'990.9'))
               END                                                          AS RATE_MM_REPAY_I    /*이자상환비율(당월)*/
              ,NVL(A.YMD_LOAN,'-')                                          AS YMD_LOAN
              ,NVL(A.YMD_LOANEND,'-')                                       AS YMD_LOANEND
              <!--  ,FN_MONTH_BETWEEN(A.YMD_LOANEND,TO_CHAR(SYSDATE,'YYYYMMDD'))  AS TERM_REMAIN
             ,FN_MONTH_BETWEEN(A.YMD_LOANEND,A.YMD_LOAN)                   AS TERM_ALL -->
              ,MONTHS_BETWEEN(TO_DATE(SUBSTR(A.YMD_LOANEND,1,6),'YYYYMM'),TO_DATE(TO_CHAR(SYSDATE,'YYYYMM'),'YYYYMM'))	
               +CASE
                    WHEN C.CUR_MM_MAX_INR_YMD > TO_CHAR(SYSDATE,'YYYYMMDD') THEN 
                        1 
                    ELSE
                        0
                END                                                         AS TERM_REMAIN
              ,MONTHS_BETWEEN(TO_DATE(SUBSTR(A.YMD_LOANEND,1,6),'YYYYMM'),TO_DATE(SUBSTR(A.YMD_LOAN,1,6),'YYYYMM')) AS TERM_ALL
              ,A.CD_TYPE_DEAL                                               AS CD_TYPE_DEAL
              ,FN_AMT_VIEW(C.TOTAL_AMT_REPAY_I - C.SUM_AMT_REPAY_I)         AS REMAIN_AMT_REPAY_I   /* 잔여이자(예상)*/
              ,FN_AMT_VIEW(C.CUR_YEAR_AMT_REPAY)                            AS AMT_REPAY_BY_YEAR
              ,FN_AMT_VIEW(C.CUR_YEAR_AMT_REPAY_P)                          AS AMT_REPAY_P_BY_YEAR
              ,FN_AMT_VIEW(C.CUR_YEAR_AMT_REPAY_I)                          AS AMT_REPAY_I_BY_YEAR
              ,TRIM(TO_CHAR(FN_ETM_INTEREST(A.NO_PERSON,A.NO_MANAGE_INFO),'990.99'))    AS EVER_INTEREST
              ,FN_AMT_VIEW(A.AMT_CONTRACT)                                  AS AMT_CONTRACT
              ,TRIM(TO_CHAR(
                   CASE
                     WHEN FN_ETM_INCOME_AMT(A.NO_PERSON) = 0 OR A.CD_TYPE_DEAL IN ('3','6') THEN
                        0
                     ELSE
                        ROUND(C.CUR_MM_AMT_REPAY/(FN_ETM_INCOME_AMT(A.NO_PERSON)/12),3) * 100
                   END,'990.9'))                                            AS REPAY_PER_INCOME /*원리금 상환/소득*/
              ,DISPLAY_YN
        FROM   DEBT_PERSONAL_INFO A
              LEFT OUTER JOIN FC_INFO B
              ON   (
                 B.CD_FC            =   A.CD_FC
              )
              LEFT OUTER JOIN (
                 SELECT    B.NO_PERSON
                       ,B.NO_MANAGE_INFO
                       ,SUM(TO_NUMBER(B.AMT_REPAY_I))                                                         AS TOTAL_AMT_REPAY_I
                       ,SUM(CASE WHEN B.REQ_YYYYMM <![CDATA[<=]]> TO_CHAR(SYSDATE,'YYYYMM') THEN TO_NUMBER(B.AMT_REPAY_I) ELSE 0 END)      AS SUM_AMT_REPAY_I
                       ,SUM(CASE WHEN B.REQ_YYYYMM = TO_CHAR(SYSDATE,'YYYYMM') THEN TO_NUMBER(B.AMT_REPAY_I) ELSE 0 END)      AS CUR_MM_AMT_REPAY_I
                       ,SUM(CASE WHEN B.REQ_YYYYMM = TO_CHAR(SYSDATE,'YYYYMM') THEN TO_NUMBER(B.AMT_REPAY_P) ELSE 0 END)      AS CUR_MM_AMT_REPAY_P
                       ,SUM(CASE WHEN B.REQ_YYYYMM = TO_CHAR(SYSDATE,'YYYYMM') THEN TO_NUMBER(B.AMT_REPAY) ELSE 0 END)         AS CUR_MM_AMT_REPAY
                       ,SUM(CASE WHEN B.REQ_YYYYMM LIKE TO_CHAR(SYSDATE,'YYYY')||'%' THEN TO_NUMBER(B.AMT_REPAY) ELSE 0 END)   AS CUR_YEAR_AMT_REPAY
                       ,SUM(CASE WHEN B.REQ_YYYYMM LIKE TO_CHAR(SYSDATE,'YYYY')||'%' THEN TO_NUMBER(B.AMT_REPAY_P) ELSE 0 END)   AS CUR_YEAR_AMT_REPAY_P
                       ,SUM(CASE WHEN B.REQ_YYYYMM LIKE TO_CHAR(SYSDATE,'YYYY')||'%' THEN TO_NUMBER(B.AMT_REPAY_I) ELSE 0 END)   AS CUR_YEAR_AMT_REPAY_I
                       ,MAX(CASE WHEN B.REQ_YYYYMM = TO_CHAR(SYSDATE,'YYYYMM') THEN B.INTEREST_YMD ELSE '' END)  AS CUR_MM_MAX_INR_YMD
                 FROM   DEBT_PERSONAL_REPAY_LIST B
                 WHERE   B.NO_PERSON   = #{no_person , jdbcType=VARCHAR}
                 GROUP BY B.NO_PERSON
                       ,B.NO_MANAGE_INFO
              ) C
              ON   (
                 C.NO_PERSON         =   A.NO_PERSON
              AND C.NO_MANAGE_INFO   =   A.NO_MANAGE_INFO
              )
        WHERE   A.NO_PERSON      =   #{no_person , jdbcType=VARCHAR}
        AND      A.YMD_CANCEL   IS NULL
        <if test="@com.koscom.util.MybatisUtil@isNotEmpty(display_yn)">
        	<if test="@com.koscom.util.MybatisUtil@contains('Y',display_yn)">
		        /*삭제처리를 위해 DISPLAY_YN이 추가되었기 때문에 조건이 추가됨 20180529 김휘경*/
		        AND	  	 A.DISPLAY_YN = 'Y'
        	</if>	
        </if>
        ORDER BY (CASE WHEN A.CD_TYPE_DEAL NOT IN ('3','6')  THEN 1
                    ELSE 2 END)
                ,(CASE WHEN A.AMT_REMAIN = '-' THEN 0
                    ELSE TO_NUMBER(A.AMT_REMAIN) END) DESC
    </select>

    <select id="getDebtInfo" parameterType="com.koscom.debt.model.DebtForm" resultType="com.koscom.debt.model.DebtVO">
        /* com.koscom.debt.dao.DebtMapper.getDebtInfo : 대출 상세정보 */
		SELECT   A.NO_PERSON
		        ,A.NO_MANAGE_INFO
		        ,A.CD_FC                        /*은행*/
		        ,C.NM_FC
		        ,CASE
		            WHEN A.YN_CREDIT = 'Y' AND A.CD_TYPE_DEAL IN ('1','2','3') THEN '신용'
		            WHEN A.YN_LOAN   = 'Y' AND A.CD_TYPE_DEAL IN ('1','2','3') THEN '담보'
		            WHEN A.CD_TYPE_DEAL IN ('4','5','6') THEN '카드론'
		            ELSE ''
		         END ||
		         CASE
		            WHEN A.CD_TYPE_DEAL IN ('1','4') THEN '(분할)'
		            WHEN A.CD_TYPE_DEAL IN ('2','5') THEN '(일시)'
		            WHEN A.CD_TYPE_DEAL IN ('3','6') THEN '(한도)'
		            WHEN A.CD_TYPE_DEAL IN ('A') THEN '리스'
		            ELSE ''
		         END                                                                    AS DEBT_TYPE            /*대출구분*/
		        ,FN_AMT_VIEW(
		             CASE
		                WHEN A.CD_TYPE_DEAL IN ('3','6') THEN
		                    0
		                ELSE
		                    B.CUR_MM_AMT_REPAY
		             END
		         )                                                                      AS CUR_MM_AMT_REPAY     /*상환금액(당월)*/
		        ,FN_AMT_VIEW(A.AMT_REMAIN)                                              AS AMT_REMAIN           /*대출잔액*/
		        ,CASE 
		            WHEN FN_ETM_INTEREST(A.NO_PERSON, A.NO_MANAGE_INFO) = 0 THEN
		                '-'
		            ELSE 
		                TRIM(TO_CHAR(FN_ETM_INTEREST(A.NO_PERSON, A.NO_MANAGE_INFO), '990.99'))
		         END AS EVER_INTEREST       /*금리*/
		        ,CASE
		            WHEN A.AMT_CONTRACT = 0 THEN
		                0
		            ELSE
		                ROUND((A.AMT_CONTRACT - A.AMT_REMAIN) / A.AMT_CONTRACT * 100,1)
		         END                                                                    AS RATE_AMT_CONTRACT    /*원금상환비율(%)*/
		        ,CASE
		            WHEN A.CD_TYPE_DEAL IN ('4','5','6') THEN
		                '카드론'
		            WHEN A.CD_TYPE_DEAL IN ('A') THEN 
		                '리스'
		            WHEN A.CD_TYPE_DEAL IN ('1','2','3') AND A.YN_CREDIT = 'Y' THEN
		                '신용대출'
		            WHEN A.CD_TYPE_DEAL IN ('1','2','3') AND A.YN_LOAN   = 'Y' THEN
		                '담보대출'
		            ELSE
		                '기타'
		         END                                                                    AS TYPE_DEAL            /*대출구분*/
		        ,A.YMD_LOAN                         /*개설일자*/
		        ,A.YMD_LOANEND                      /*만기일자*/
		        ,FN_AMT_VIEW(A.AMT_CONTRACT)                                            AS AMT_CONTRACT         /*대출원금*/
		        ,MONTHS_BETWEEN(TO_DATE(SUBSTR(A.YMD_LOANEND,1,6),'YYYYMM'),TO_DATE(SUBSTR(A.YMD_LOAN,1,6),'YYYYMM')) AS TERM_ALL   /*대출기간*/
		        ,CASE
		             WHEN A.CD_TYPE_DEAL IN ('1','4') THEN '분할상환'
		             WHEN A.CD_TYPE_DEAL IN ('2','5') THEN '만기일시상환'
		             WHEN A.CD_TYPE_DEAL IN ('3','6') THEN '한도대출'
		             WHEN A.CD_TYPE_DEAL IN ('A') THEN '리스'
		             ELSE ''
		         END                                                                    AS REP_METHOD           /*상환방식*/
		        ,MONTHS_BETWEEN(TO_DATE(SUBSTR(A.YMD_LOANEND,1,6),'YYYYMM'),TO_DATE(TO_CHAR(SYSDATE,'YYYYMM'),'YYYYMM'))	
		               +CASE
		                    WHEN B.CUR_MM_MAX_INR_YMD > TO_CHAR(SYSDATE,'YYYYMMDD') THEN 
		                        1 
		                    ELSE
		                        0
		                END                                                         AS TERM_REMAIN
		        ,C.TEL AS TEL                        /*전화걸기 기능을 위한 전화번호 추가 20180529 김휘경*/
		FROM    DEBT_PERSONAL_INFO A
		        INNER JOIN 
		        (
		            SELECT   B.NO_PERSON
		                    ,B.NO_MANAGE_INFO
		                    ,SUM(
		                        CASE
		                            WHEN B.REQ_YYYYMM = TO_CHAR(SYSDATE,'YYYYMM') THEN TO_NUMBER(B.AMT_REPAY)
		                            ELSE 0
		                        END)            AS CUR_MM_AMT_REPAY
		                    ,MAX(CASE WHEN B.REQ_YYYYMM = TO_CHAR(SYSDATE,'YYYYMM') THEN B.INTEREST_YMD ELSE '' END)  AS CUR_MM_MAX_INR_YMD
		            FROM    DEBT_PERSONAL_REPAY_LIST B
		            WHERE   B.NO_PERSON =   #{no_person , jdbcType=VARCHAR}
		            AND     B.NO_MANAGE_INFO    =   #{no_manage_info , jdbcType=VARCHAR}
		            GROUP BY B.NO_PERSON
		                    ,B.NO_MANAGE_INFO
		        ) B
		        ON  (
		            B.NO_PERSON         =   A.NO_PERSON
		        AND B.NO_MANAGE_INFO    =   A.NO_MANAGE_INFO
		        )
		        INNER JOIN FC_INFO C
		        ON  (
		            C.CD_FC     =   A.CD_FC
		        )
		WHERE   A.NO_PERSON         =   #{no_person , jdbcType=VARCHAR}
		AND     A.NO_MANAGE_INFO    =   #{no_manage_info , jdbcType=VARCHAR}
    </select>

    <select id="listDebtLast12BizDay" parameterType="com.koscom.debt.model.DebtForm" resultType="com.koscom.debt.model.DebtDetail12RepVO">
        /* com.koscom.debt.dao.DebtMapper.listDebtLast12BizDay : 최근 12개월 상환내역 */
        SELECT no_manage_info
              ,req_yyyymm                               /* 기준월            */
              ,dt_st                                    /* 기준월일          */
              ,cd_state                                 /* 계좌상태	         */
              ,FN_AMT_VIEW(amt_repay  )  amt_repay    /* 상환금액(원금+이자) */
              ,FN_AMT_VIEW(amt_repay_p)  amt_repay_p  /* 상환금액(원금)      */
              ,FN_AMT_VIEW(amt_repay_i)  amt_repay_i  /* 상환금액(이자)      */
          FROM (SELECT I.NO_MANAGE_INFO   /* 정보관리번호 */
                      ,TO_CHAR(TO_DATE(R.REQ_YYYYMM,'YYYYMM'),'YYYY.MM')         REQ_YYYYMM
                      ,FN_DEBT_BIZ_DAY(R.REQ_YYYYMM || SUBSTR(R.PAYMENT_YMD,7)) AS DT_ST /* 기준월일            */
                      ,R.CD_ACCOUNT
                      ,R.AMT_MID_REPAY
                      ,(CASE WHEN R.CD_ACCOUNT =  '0' THEN '0' /* 정상     */
                             WHEN R.CD_ACCOUNT BETWEEN '1' AND '7' THEN '3' /* 연체 */
                             ELSE  '5' /* 기타 */  
                        END)      CD_STATE   /* 계좌상태 */
                      ,R.AMT_REPAY      /* 상환금액(원금+이자) */
                      ,R.AMT_REPAY_P    /* 상환금액(원금)      */
                      ,R.AMT_REPAY_I    /* 상환금액(이자)      */
                  FROM DEBT_PERSONAL_REPAY_LIST R /*KCB 계좌별 대출상세정보*/
                      ,DEBT_PERSONAL_INFO       I /* KCB 회원 계좌별 대출정보(KCB+추정DATA)*/
                 WHERE I.NO_PERSON      = R.NO_PERSON
                   AND I.NO_MANAGE_INFO = R.NO_MANAGE_INFO
                   AND I.NO_PERSON      = #{no_person, jdbcType=VARCHAR}
                   AND I.NO_MANAGE_INFO = #{no_manage_info, jdbcType=VARCHAR} /* 정보관리번호 */
                   AND I.YMD_CANCEL     IS NULL
                   AND R.PAYMENT_YMD IS NOT NULL
                   AND (TO_CHAR(ADD_MONTHS(SYSDATE , -12),'YYYYMM') <![CDATA[<]]> R.REQ_YYYYMM)
                   AND (TO_CHAR(SYSDATE ,'YYYYMM') >= R.REQ_YYYYMM)
              )
         ORDER BY dt_st
    </select>

<!-- DEBT_PERSONAL_INFO에서 삭제 처리를 하는 것으로 실제 삭제가 아니라 DISPLAY_YN 을 'N'으로 만들어준다. 20180529 김휘경-->
    <update id="updateDebtDisplay" parameterType="com.koscom.debt.model.DebtForm">
    	UPDATE DEBT_PERSONAL_INFO SET
    		DISPLAY_YN = #{display_yn, jdbcType=VARCHAR}
    			WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
    			AND NO_MANAGE_INFO = #{no_manage_info, jdbcType=VARCHAR}
    </update>

<!-- 	대출 정보 수정에 필요한 정보들을 가져오는 쿼리 20180530김휘경-->
	<select id="getDebtInfoForUpdate" parameterType="com.koscom.debt.model.DebtForm" resultType="com.koscom.debt.model.DebtVO">
		SELECT REPAYMENT AS rep_method,
			   LOAN_MOUNT,
			   INTER_PAY_DAY,
			   INTER_PAY_CYCLE
		FROM DEBT_PERSONAL_INFO
			WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
				AND NO_MANAGE_INFO = #{no_manage_info, jdbcType=VARCHAR}
	</select>

<!-- 	대출 정보를 수정하는 쿼리 20180530 김휘경-->
	<update id="updateDebtInfo" parameterType="com.koscom.debt.model.DebtVO">
		UPDATE DEBT_PERSONAL_INFO SET
			   INTEREST = #{interest, jdbcType=VARCHAR},
			   REPAYMENT = #{rep_method, jdbcType=VARCHAR},
			   LOAN_MOUNT = #{loan_mount, jdbcType=VARCHAR},
			   INTER_PAY_DAY = #{inter_pay_day, jdbcType=VARCHAR},
			   INTER_PAY_CYCLE = #{inter_pay_cycle, jdbcType=VARCHAR},
			   UPDATE_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
		WHERE NO_PERSON = #{no_person, jdbcType=VARCHAR}
			AND NO_MANAGE_INFO = #{no_manage_info, jdbcType=VARCHAR} 
	</update>

	<update id="modifySeqNewDeptReg" parameterType="java.lang.String">

		update person_info
			set SEQ_NEW_DEBT_REG = (select max(seq) from credit_info where credit_info.no_person = person_info.no_person and nm_if = '300')
		where no_person = #{no_person, jdbcType=VARCHAR}

	</update>


	<select id="getDebtKcbWebBunch" parameterType="java.lang.String" resultType="int">
		select MAX(seq_req) +1  as no_bunch_ from debt_kcb_web where no_person = #{no_person}
	</select>

	<insert id="addDebtKcbWeb" parameterType="com.koscom.debt.model.DebtKcbWebVO">

		INSERT INTO kcb_web_debt
			(SEQ_REQ,NO_PERSON,NM_BIZ,NM_LOAN_TYPE,YMD_LOAN,YMD_LOADEND,AMT_CONTRACT,NM_LOAN_GUBUN,YM_USE,AMT_REPAY,AMT_REMAIN,AMT_DELAY,NM_ACCOUNT_STATUS,ID_FRT,DT_FRT)
		VALUES (
				  #{seq_req , jdbcType=NUMERIC}
				, #{no_person , jdbcType=VARCHAR}
				, #{nm_biz , jdbcType=VARCHAR}
				, #{nm_loan_type			,jdbcType=VARCHAR}
				, #{ymd_loan				,jdbcType=VARCHAR}
				, #{ymd_loadend				,jdbcType=VARCHAR}
				, #{amt_contract			,jdbcType=VARCHAR}
				, #{nm_loan_gubun			,jdbcType=VARCHAR}
				, #{ym_use					,jdbcType=VARCHAR}
				, #{amt_repay				,jdbcType=VARCHAR}
				, #{amt_remain				,jdbcType=VARCHAR}
				, #{amt_delay				,jdbcType=VARCHAR}
				, #{nm_account_status		,jdbcType=VARCHAR}
				, 'system'
				, SYSDATE
			)
	</insert>

	<insert id="addDebtPersonalInfo" parameterType="java.lang.String" >

		insert into debt_personal_info
		(	NO_MANAGE_INFO,
			NO_PERSON,
			AMT_REMAIN,
			YMD_LOAN,
			INTER_PAY_DAY,
			AMT_CONTRACT,
			ID_FRT,
			DT_FRT,
			ID_LST,
			DT_LST
		)
		select
			NO_MANAGE_INFO,
			NO_PERSON,
			AMT_REMAIN,
			YMD_LOAN,
			SUBSTR(YMD_LOAN,5,2) as INTER_PAY_DAY,
			AMT_CONTRACT,
			#{no_person, jdbcType=VARCHAR},
			SYSDATE,
			#{no_person, jdbcType=VARCHAR},
			SYSDATE
		from
		(
			select * from KCB_030_INFO where seq_credit_info = (
				select max(seq) as seq_ from CREDIT_INFO where #{no_person, jdbcType=VARCHAR} and nm_if = '300'
			) and no_manage_info not in (
			 select '' from DEBT_PERSONAL_INFO where KCB_030_INFO.no_manage_info = DEBT_PERSONAL_INFO.no_manage_info and DEBT_PERSONAL_INFO.no_person = #{no_person, jdbcType=VARCHAR} )
		)	order by YMD_LOAN asc
	</insert>

	<insert id="addDebtPersonalRepayList" parameterType="java.lang.String" >
		insert into DEBT_PERSONAL_REPAY_LIST (
			no_manage_info,
			NO_PERSON,
			ym_use,
			nm_account_status,
			amt_repay,
			AMT_REMAIN,
			AMT_DELAY,
			id_frt,
			dt_frt,
			id_lst,
			dt_lst
		)
		select    no_manage_info
				, NO_PERSON
				, ym_use
				, nm_account_status
				, amt_repay
				, AMT_REMAIN
				, AMT_DELAY
				, #{no_person, jdbcType=VARCHAR}
				, sysdate
				, #{no_person, jdbcType=VARCHAR}
				, sysdate
		from kcb_web_debt where (no_person, no_manage_info) in
		(select no_person, no_manage_info from DEBT_PERSONAL_INFO where no_person = #{no_person, jdbcType=VARCHAR})
		and (no_person, no_manage_info,YM_USE) not in (
			select no_person, no_manage_info,YM_USE from DEBT_PERSONAL_REPAY_LIST where no_person = #{no_person, jdbcType=VARCHAR}
		)
	</insert>

	<update id="updateDebtBizNameAndymdLoanEnd" parameterType="java.lang.String">

		update DEBT_PERSONAL_INFO
		set (nm_biz, ymd_loanend)  = (	select max(nm_biz), max(ymd_loanend)
										from kcb_web_debt
										where kcb_web_debt.no_person = DEBT_PERSONAL_INFO.no_person
										and kcb_web_debt.no_manage_info = DEBT_PERSONAL_INFO.no_manage_info )
			   , ID_LST    = #{no_person, jdbcType=VARCHAR}
			   , DT_LST    = SYSDATE
		where (no_person, no_manage_info) in (
			select distinct no_person, no_manage_info from kcb_web_debt where SEQ_REQ = (
					select max(SEQ_REQ) as seq_ from kcb_web_debt where no_person = #{no_person, jdbcType=VARCHAR}
			)
		)
		and ymd_loanend is null
	</update>

	<!-- 정보관리번호 조회 -->
	<select id="selectKcbNoManage" parameterType="com.koscom.debt.model.CrawlingLoanVO" resultType="java.lang.String">
		SELECT /* com.koscom.debt.dao.DebtMapper.selectKcbNoManage */
			   DISTINCT A.NO_MANAGE_INFO
		  FROM DEBT_PERSONAL_INFO A
		 WHERE A.NO_PERSON 		= #{no_person, jdbcType=VARCHAR}
		   AND A.YMD_LOAN 		= #{ymd_loan, jdbcType=VARCHAR}
		   AND A.AMT_CONTRACT 	= #{amt_contract, jdbcType=VARCHAR}
	</select>

	<select id="selectKcbNoManageSeq" resultType="java.lang.String">
		SELECT TO_CHAR(SEQ_DEBT_PERSONAL_INFO.NEXTVAL) FROM DUAL
	</select>

	<insert id="insertKcbDebt" parameterType="com.koscom.debt.model.CrawlingLoanVO">
		<selectKey keyProperty="no_manage_info" resultType="string" order="BEFORE">
			(SELECT TO_CHAR(SEQ_DEBT_PERSONAL_INFO.NEXTVAL) FROM DUAL)
		</selectKey>
		/* com.koscom.debt.dao.DebtMapper.insertKcbDebt */
		INSERT INTO DEBT_PERSONAL_INFO
		   ( NO_MANAGE_INFO
			,NO_PERSON
			,CD_FC
			,NM_BIZ
			,YMD_LOAN
			,YMD_LOANEND
			,INTER_PAY_DAY
			,AMT_CONTRACT
			,AMT_REMAIN
			,CD_TYPE_DEAL
			,YN_CREDIT
			,YN_LOAN
			,YN_GUARANTOR
			,ID_FRT
			,DT_FRT
			,ID_LST
			,DT_LST
		) VALUES (
			 #{no_manage_info, 	jdbcType=VARCHAR}
			,#{no_person, 		jdbcType=VARCHAR}
			,#{cd_fc,			jdbcType=VARCHAR}
			,#{nm_biz, 			jdbcType=VARCHAR}
			,#{ymd_loan, 		jdbcType=VARCHAR}
			,#{ymd_loanend, 	jdbcType=VARCHAR}
			,SUBSTR(#{ymd_loanend, jdbcType=VARCHAR}, 7, 2)
			,#{amt_contract, 	jdbcType=VARCHAR}
			,#{amt_remain,		jdbcType=VARCHAR}
			,(SELECT CODE_VALUE FROM COMM_CD A WHERE A.CODE_GROUP = 'cd_type_deal' AND TRIM(A.NM_CODE) = TRIM(#{cd_type_deal, jdbcType=VARCHAR}))
			,#{yn_credit, 		jdbcType=VARCHAR}
			,#{yn_loan, 		jdbcType=VARCHAR}
			,#{yn_guarantor, 	jdbcType=VARCHAR}
			,#{id_frt, 			jdbcType=VARCHAR}
			,SYSDATE
			,#{id_lst, 			jdbcType=VARCHAR}
			,SYSDATE
		)
	</insert>

	<update id="updateKcbDebtCancel" parameterType="hashmap">
	    /* com.koscom.debt.dao.DebtMapper.updateKcbDebtCancel */
		UPDATE DEBT_PERSONAL_INFO
		   SET ID_LST 		= #{no_person, jdbcType=VARCHAR}
			  ,DT_LST 		= SYSDATE
			  <if test="@com.koscom.util.MybatisUtil@isEmpty(cd_fc)">
			  ,YMD_CANCEL 	= TO_CHAR(SYSDATE, 'YYYYMMDD')
			  </if>
			  <if test="@com.koscom.util.MybatisUtil@isNotEmpty(cd_fc)">
			  ,YMD_CANCEL 	= NULL
			  </if>
		 WHERE NO_PERSON 		= #{no_person, jdbcType=VARCHAR}
		 <if test="@com.koscom.util.MybatisUtil@isNotEmpty(cd_fc)">
		   AND CD_FC 		= #{cd_fc, jdbcType=VARCHAR}
		   AND YMD_LOAN 	= #{ymd_loan, jdbcType=VARCHAR}
		   AND AMT_CONTRACT = #{amt_contract, jdbcType=VARCHAR}
		 </if>
	</update>

	<update id="updateKcbDebt" parameterType="hashmap">
	    /* com.koscom.debt.dao.DebtMapper.updateKcbDebt */
		UPDATE DEBT_PERSONAL_INFO
		   SET AMT_REMAIN 	= #{amt_remain, jdbcType=VARCHAR}
		      ,YMD_LOANEND 	= #{ymd_loanend, jdbcType=VARCHAR}
		      ,ID_LST 		= #{id_lst, jdbcType=VARCHAR}
			  ,DT_LST 		= SYSDATE
		 WHERE NO_PERSON 	= #{no_person, jdbcType=VARCHAR}
		   AND CD_FC 		= #{cd_fc, jdbcType=VARCHAR}
		   AND YMD_LOAN 	= #{ymd_loan, jdbcType=VARCHAR}
		   AND AMT_CONTRACT = #{amt_contract, jdbcType=VARCHAR}
	</update>

	<update id="updateKcbDtlDebt" parameterType="com.koscom.debt.model.CrawlingLoanDtlVO">
	    /* com.koscom.debt.dao.DebtMapper.updateKcbDtlDebt */
		MERGE INTO DEBT_PERSONAL_REPAY_LIST
		  USING DUAL
		  ON (		NO_PERSON = #{no_person, jdbcType=VARCHAR}
		  		AND NO_MANAGE_INFO = #{no_manage_info, jdbcType=VARCHAR}
		  		AND REQ_YYYYMM = #{req_yyyymm, jdbcType=VARCHAR})
			WHEN MATCHED THEN
		     UPDATE
			  SET YN_KCB 		= 'Y'
			     ,CD_ETM_BASIC	= NULL
			     ,CD_ACCOUNT 	= (SELECT CODE_VALUE FROM COMM_CD A WHERE A.CODE_GROUP = 'cd_account' AND A.NM_CODE LIKE TRIM(#{nm_account, jdbcType=VARCHAR}))
			 	 ,NM_ACCOUNT 	= #{nm_account, jdbcType=VARCHAR}
			 	 ,AMT_REPAY		= #{amt_repay, jdbcType=VARCHAR}
			 	 ,AMT_REMAIN	= #{amt_remain, jdbcType=VARCHAR}
			 	 ,AMT_DELAY 	= #{amt_due, jdbcType=VARCHAR}
				 ,ID_LST    	= #{no_person, jdbcType=VARCHAR}
				 ,DT_LST    	= SYSDATE
			WHEN NOT MATCHED THEN
			  INSERT
			(
				NO_PERSON,
				NO_MANAGE_INFO,
				REQ_YYYYMM,
				YN_KCB,
				CD_ACCOUNT,
				NM_ACCOUNT,
				AMT_REPAY,
				AMT_REMAIN,
				AMT_DELAY,
				ID_FRT,
				DT_FRT,
				ID_LST,
				DT_LST
			)
			VALUES(
				 #{no_person, jdbcType=VARCHAR}
				,#{no_manage_info, jdbcType=VARCHAR}
				,#{req_yyyymm, jdbcType=VARCHAR}
				,'Y'
				,(SELECT CODE_VALUE FROM COMM_CD A WHERE A.CODE_GROUP = 'cd_account' AND A.NM_CODE LIKE TRIM(#{nm_account, jdbcType=VARCHAR}))
				,#{nm_account, jdbcType=VARCHAR}
				,#{amt_repay, jdbcType=VARCHAR}
				,#{amt_remain, jdbcType=VARCHAR}
				,#{amt_due, jdbcType=VARCHAR}
				,#{no_person, jdbcType=VARCHAR}
				,SYSDATE
				,#{no_person, jdbcType=VARCHAR}
				,SYSDATE
			)
	</update>

	<select id="getDebtPersonalInfoVO" parameterType="com.koscom.debt.model.DebtPersonalInfoVO" resultType="com.koscom.debt.model.DebtPersonalInfoVO">
		select
			 no_person,
			 no_manage_info,
			 nm_biz_type,
			 bank_code,
			 goods_code,
			 nm_biz,
			 update_date,
			 account_no,
			 interest_fixed_yn,
			 interest,
			 repayment,
			 cd_type_deal,
			 cd_use_fund,
			 yn_credit,
			 yn_loan,
			 yn_guarantor,
			 amt_contract,
			 amt_remain,
			 loan_mount,
			 duration_load,
			 amt_total_pni,
			 amt_total_p,
			 amt_total_i,
			 amt_repay_pni,
			 amt_repay_p,
			 amt_repay_i,
			 amt_remain_pni,
			 amt_remain_p,
			 amt_remain_i,
			 rto_pr,
			 amt_repay_pni_year,
			 amt_repay_p_year,
			 amt_repay_i_year,
			 ymd_loan,
			 inter_pay_day,
			 ymd_cancel,
			 ymd_loanend,
			 cd_cancel,
			 cd_group_loans_proxy,
			 yn_delay_turn_loan,
			 yn_recovery,
			 moderate_fee,
			 id_frt,
			 dt_frt,
			 amt_kcb_repay,
			 amt_kcb_delay
		from debt_personal_info
		where
			no_person = #{no_person, jdbcType=VARCHAR}
			and no_manage_info = #{no_manage_info, jdbcType=VARCHAR}
	</select>


	<select id="listDebtPersonalRepay" parameterType="com.koscom.debt.model.DebtPersonalInfoVO" resultType="com.koscom.debt.model.DebtPersonalRepayListVO">
		select
			 no_person,
			 no_manage_info,
			 req_yyyymm,
			 yn_kcb,
			 cd_account,
			 nm_account,
			 amt_repay,
			 amt_repay_p,
			 amt_repay_i,
			 amt_mid_repay,
			 fees_mid_repay,
			 amt_remain,
			 amt_delay,
			 etm_interest,
			 bank_interest,
			 interest_day,
			 payment_ymd,
			 interest_ymd,
			 interest_cal_dcnt,
			 cd_etm_basic,
			 id_frt,
			 dt_frt,
			 id_lst,
			 dt_lst,
			 interest_strt_ymd,
			 interest_end_ymd

		from DEBT_PERSONAL_REPAY_LIST
		where
			no_person = #{no_person, jdbcType=VARCHAR}
			and no_manage_info = #{no_manage_info, jdbcType=VARCHAR}
	</select>

	<update id="saveDebtPersonalInfo" parameterType="com.koscom.debt.model.DebtPersonalInfoVO">
		/* com.koscom.debt.dao.DebtMapper.saveDebtPersonalInfo */
		MERGE INTO DEBT_PERSONAL_INFO
		   USING DUAL
		   ON (NO_PERSON = #{no_person}
		   AND NO_MANAGE_INFO = #{no_manage_info})
		WHEN MATCHED THEN
		      UPDATE
		         SET  AMT_REMAIN 	= #{amt_remain, jdbcType=VARCHAR}
					, ID_LST 		= #{no_person, jdbcType=VARCHAR}
					, DT_LST 		= SYSDATE
		WHEN NOT MATCHED THEN
				INSERT ( NO_MANAGE_INFO
						,NO_PERSON
						,NM_BIZ_TYPE
						,AMT_REMAIN
						,YMD_LOAN
						,AMT_CONTRACT
						,CD_TYPE_DEAL
						,YN_CREDIT
						,YN_LOAN
						,YN_GUARANTOR
						,ID_FRT
						,DT_FRT
						,ID_LST
						,DT_LST )
				VALUES (
					#{no_manage_info, jdbcType=VARCHAR}
					,#{no_person, jdbcType=VARCHAR}
					,#{nm_biz_type, jdbcType=VARCHAR}
					,#{amt_remain, jdbcType=VARCHAR}
					,#{ymd_loan, jdbcType=VARCHAR}
					,#{amt_contract, jdbcType=VARCHAR}
					,#{cd_type_deal, jdbcType=VARCHAR}
					,#{yn_credit, jdbcType=VARCHAR}
					,#{yn_loan, jdbcType=VARCHAR}
					,#{yn_guarantor, jdbcType=VARCHAR}
					,#{no_person, jdbcType=VARCHAR}
					,SYSDATE
					,#{no_person, jdbcType=VARCHAR}
					,SYSDATE
				)
	</update>

	<update id="saveDebtPersonalRepayList" parameterType="com.koscom.debt.model.DebtPersonalRepayListVO">
		/* com.koscom.debt.dao.DebtMapper.saveDebtPersonalRepayList */
		MERGE INTO DEBT_PERSONAL_REPAY_LIST
		   USING DUAL
		   ON (NO_PERSON = #{no_person}
		   AND NO_MANAGE_INFO = #{no_manage_info}
		   AND REQ_YYYYMM = #{req_yyyymm})
		WHEN MATCHED THEN
		      UPDATE
		         SET  AMT_DELAY 	= #{amt_delay, jdbcType=VARCHAR}
					, CD_ACCOUNT 	= #{cd_account, jdbcType=VARCHAR}
					, ID_LST 		= #{id_lst, jdbcType=VARCHAR}
					, DT_LST 		= SYSDATE
		WHEN NOT MATCHED THEN
				INSERT ( NO_MANAGE_INFO
						,NO_PERSON
						,REQ_YYYYMM
						,AMT_DELAY
						,CD_ACCOUNT
						,ID_FRT
						,DT_FRT
						,ID_LST
						,DT_LST)
				VALUES (
					 #{no_manage_info, jdbcType=VARCHAR}
					,#{no_person, jdbcType=VARCHAR}
					,#{req_yyyymm, jdbcType=VARCHAR}
					,#{amt_delay, jdbcType=VARCHAR}
					,#{cd_account, jdbcType=VARCHAR}
					,#{id_frt, jdbcType=VARCHAR}
					,SYSDATE
					,#{id_frt, jdbcType=VARCHAR}
					,SYSDATE
				)
	</update>

	<update id="saveKcbLoanInfo" parameterType="com.koscom.debt.model.KcbLoanInfoVO">
	    /* com.koscom.debt.dao.DebtMapper.saveKcbLoanInfo */
		MERGE INTO KCB_LOAN_INFO
		  USING DUAL
		  ON (		NO_PERSON 	= #{no_person, jdbcType=VARCHAR}
		  		AND REQ_YYYYMM 	= #{req_yyyymm, jdbcType=VARCHAR})
			WHEN MATCHED THEN
		     UPDATE
			    SET ID_LST				= #{no_person, jdbcType=VARCHAR}
			       ,DT_LST				= SYSDATE
			       <if test="@com.koscom.util.MybatisUtil@isNotEmpty(cnt_loan)">
			       ,CNT_LOAN 			= #{cnt_loan,  jdbcType=VARCHAR}
				   ,AMT_LOAN 			= #{amt_loan,  jdbcType=VARCHAR}
				   </if>
				   <if test="@com.koscom.util.MybatisUtil@isNotEmpty(cnt_delay)">
				   ,CNT_DELAY 			= #{cnt_delay,   		jdbcType=VARCHAR}
				   ,AMT_MONTH 			= #{amt_month,    		jdbcType=VARCHAR}
				   ,DAY_LONGEST_OVERDUE = #{day_longest_overdue,jdbcType=VARCHAR}
				   </if>
			WHEN NOT MATCHED THEN
			INSERT
			(
				 NO_PERSON
				,REQ_YYYYMM
				,CNT_LOAN
				,AMT_LOAN
				,CNT_DELAY
				,AMT_MONTH
				,DAY_LONGEST_OVERDUE
				,ID_FRT
				,DT_FRT
				,ID_LST
				,DT_LST
			)
			VALUES(
				 #{no_person,          	jdbcType=VARCHAR}
				,#{req_yyyymm,          jdbcType=VARCHAR}
				,#{cnt_loan,            jdbcType=VARCHAR}
				,#{amt_loan,            jdbcType=VARCHAR}
				,#{cnt_delay,           jdbcType=VARCHAR}
				,#{amt_month,          	jdbcType=VARCHAR}
				,#{day_longest_overdue, jdbcType=VARCHAR}
				,#{no_person,    		jdbcType=VARCHAR}
				,SYSDATE
				,#{no_person,    		jdbcType=VARCHAR}
				,SYSDATE
			)
	</update>

	<select id="listDebtInfo" parameterType="java.lang.String" resultType="hashmap">
	    /* com.koscom.debt.dao.DebtMapper.listDebtInfo */
		SELECT A.NO_PERSON		AS "no_person"
		      ,A.NO_MANAGE_INFO AS "no_manage_info"
		  FROM DEBT_PERSONAL_INFO A
		 WHERE A.NO_PERSON = #{no_person, jdbcType=VARCHAR}
		   AND A.YMD_LOANEND > TO_CHAR(SYSDATE, 'YYYYMMDD')
		   AND A.YMD_LOAN > NVL(A.YMD_CANCEL, '0')
		   AND A.AMT_REMAIN > 0
	</select>


	<!-- 회원 부채 정보 금리 추정 처리 -->
	<select id="debtInterestEtmPdoc" statementType="CALLABLE" parameterType="hashmap">
		{ call PKG_LOAN_INTEREST_ETM.P_START(
			#{no_person, mode=IN, jdbcType=VARCHAR},
			#{no_manage_info, mode=IN, jdbcType=VARCHAR},
			#{p_rtn_cd, mode=OUT, jdbcType=VARCHAR, resultMap=myMap},
			#{p_rtn_msg, mode=OUT, jdbcType=VARCHAR, resultMap=myMap}) }
	</select>

<!-- 	<select id="getDebtProcFirstYn" parameterType="com.koscom.debt.model.DebtPersonalInfoVO" resultType="java.lang.String">
		select decode(count(1),1,'N','Y') as DEBT_PROC_FIRST_YN from debt_personal_info
		where
			no_person = #{no_person, jdbcType=VARCHAR}
			and no_manage_info = #{no_manage_info, jdbcType=VARCHAR}
			and update_date is not null
	</select> -->

<!-- 	<select id="debtPdocFirstY" statementType="CALLABLE" parameterType="com.koscom.debt.model.DebtPersonalInfoVO">
		{ call PKG_LOAN_INTEREST_ETM_FST.P_START(
			#{no_person, mode=IN, jdbcType=VARCHAR},
			#{no_manage_info, mode=IN, jdbcType=VARCHAR},
			#{p_rtn_cd, mode=OUT, jdbcType=VARCHAR},
			#{p_rtn_msg, mode=OUT, jdbcType=VARCHAR} ) }
	</select> -->

<!-- 	<select id="debtPdocFirstN" statementType="CALLABLE" parameterType="com.koscom.debt.model.DebtPersonalInfoVO">
		{ call PKG_LOAN_INTEREST_ETM_UDT.P_START(
			#{no_person, mode=IN, jdbcType=VARCHAR},
			#{no_manage_info, mode=IN, jdbcType=VARCHAR},
			#{p_rtn_cd, mode=OUT, jdbcType=VARCHAR},
			#{p_rtn_msg, mode=OUT, jdbcType=VARCHAR} ) }
	</select> -->

<!-- 	<select id="debtPdocTest" statementType="CALLABLE" parameterType="com.koscom.debt.model.DebtPersonalInfoVO">
		{ call PKG_LOAN_INTEREST_ETM_FST_TEST.P_START(
			#{no_person, mode=IN, jdbcType=VARCHAR},
			#{no_manage_info, mode=IN, jdbcType=VARCHAR},
			#{p_rtn_cd, mode=OUT, jdbcType=VARCHAR},
			#{p_rtn_msg, mode=OUT, jdbcType=VARCHAR} )  }
	</select> -->

	<!-- 관리자. 회원별 부채요약정보조회 -->
    <select id="listDebtPersonInfo" parameterType="com.koscom.debt.model.KcBankerDebtInfoVO" resultType="com.koscom.debt.model.KcBankerDebtInfoVO">
		/* com.koscom.debt.dao.DebtMapper.listDebtPersonInfo */
		SELECT   A.NO_PERSON               /*회원관리번호*/
		        ,B.NM_PERSON               /*회원명*/
		        ,A.NO_MANAGE_INFO          /*정보관리번호*/
		        ,A.NM_BIZ_TYPE             /*업종명*/
		        ,A.NM_BIZ                  /*금융기관명*/
		        ,A.YMD_LOAN                /*대출일자*/
		        ,A.YMD_CANCEL              /*해지일자*/
		        ,A.YMD_LOANEND             /*만기일자*/
		        ,C.NM_CODE      AS REPAYMENT_NM /*상환방식(01:원리금균등, 02:원금균등,03:일시)*/
		        ,D.NM_CODE      AS DEAL_NM /*거래형태코드*/
                ,A.YN_CREDIT               /*신용여부*/
                ,A.YN_LOAN                 /*담보여부*/
		        ,A.AMT_CONTRACT            /*약정금액*/
		        ,A.AMT_REMAIN              /*대출잔액*/
		        ,A.LOAN_MOUNT              /*거치기간*/
		        ,A.DURATION_LOAD           /*잔여기간*/
		        ,A.AMT_TOTAL_PNI           /*총원리금*/
		        ,A.AMT_TOTAL_P             /*총원금*/
		        ,A.AMT_TOTAL_I             /*총이자*/
		        ,A.AMT_REPAY_PNI           /*누적상환원리금*/
		        ,A.AMT_REPAY_P             /*누적상환원금*/
		        ,A.AMT_REPAY_I             /*누적상환이자*/
		        ,A.AMT_REMAIN_PNI          /*잔여원리금*/
		        ,A.AMT_REMAIN_P            /*잔여원금*/
		        ,A.AMT_REMAIN_I            /*잔여이자*/
		        ,TO_CHAR(A.UPDATE_DATE,'YYYYMMDD') AS UPDATE_DATE   /*업데이트일자*/
<!--
		        ,A.CD_FC                   /*은행코드*/
		        ,A.GOODS_CODE              /*상품코드*/
		        ,A.ACCOUNT_NO              /*계좌번호*/
		        ,A.INTEREST_FIXED_YN       /*고정유무*/
		        ,A.INTEREST                /*고정금리*/
		        ,A.REPAYMENT               /*상환방식(01:원리금균등, 02:원금균등,03:일시*/
		        ,A.CD_TYPE_DEAL            /*거래형태코드*/
		        ,A.CD_USE_FUND             /*자금용도코드*/
		        ,A.YN_GUARANTOR            /*보증인여부*/
		        ,A.RTO_PR                  /*원금상환비율*/
		        ,A.AMT_REPAY_PNI_YEAR      /*원리금상환_년*/
		        ,A.AMT_REPAY_P_YEAR        /*원금상환_년*/
		        ,A.AMT_REPAY_I_YEAR        /*이자상환_년*/
		        ,A.CD_CANCEL               /*해지사유코드*/
		        ,A.CD_GROUP_LOANS_PROXY    /*집단대출대납구분코*/
		        ,A.YN_DELAY_TURN_LOAN      /*연체대환대출여부*/
		        ,A.YN_RECOVERY             /*신용회복지원여부*/
		        ,A.MODERATE_FEE            /*중도상환수수료*/
		        ,A.INTER_PAY_DAY           /*결제일*/
		        ,A.DEBT_YN                 /*부채적용여부*/
		        ,A.DT_STD                  /*기준일자*/ -->
		FROM    DEBT_PERSONAL_INFO A
		        INNER JOIN PERSON_INFO B
		        ON  (
		            B.NO_PERSON = A.NO_PERSON
		        )
		        LEFT OUTER JOIN (
		            SELECT   C.CODE_VALUE
		                    ,C.NM_CODE
		            FROM    COMM_CD C
		            WHERE   C.CODE_GROUP = 'cd_type_pay'
		            AND     C.CODE_VALUE != ' '
		        ) C
		        ON  (
		            C.CODE_VALUE = A.REPAYMENT
		        )
		        LEFT OUTER JOIN (
		            SELECT   D.CODE_VALUE
		                    ,D.NM_CODE
		            FROM    COMM_CD D
		            WHERE   D.CODE_GROUP = 'cd_type_deal'
		            AND     D.CODE_VALUE != ' '
		        ) D
		        ON  (
		            D.CODE_VALUE = A.CD_TYPE_DEAL
		        )
		WHERE   1=1
		<if test="@com.koscom.util.MybatisUtil@isNotEmpty(no_person)">
		AND   A.NO_PERSON = #{no_person, jdbcType=VARCHAR}
		</if>
		ORDER BY A.NO_PERSON, A.NO_MANAGE_INFO
    </select>

	<!-- 관리자. 회원별 부채별 상세정보조회 -->
    <select id="listDebtPersonRepay" parameterType="com.koscom.debt.model.KcBankerDebtRepayVO" resultType="com.koscom.debt.model.KcBankerDebtRepayVO">
		SELECT   A.NO_MANAGE_INFO         /*정보관리번호*/
                ,A.REQ_YYYYMM             /*기준년월*/
                ,A.YN_KCB                 /*KCB여부*/
                ,A.CD_ACCOUNT             /*계좌상태코드*/
                ,A.NM_ACCOUNT             /*계좌상태명*/
                ,A.AMT_REPAY              /*상환금액*/
                ,A.AMT_REPAY_P            /*상환원금*/
                ,A.AMT_REPAY_I            /*상환이자*/
                ,A.AMT_MID_REPAY          /*중도상환금*/
                ,A.AMT_REMAIN             /*대출잔액*/
                ,A.AMT_DELAY              /*1개월전연체금액*/
                ,A.ETM_INTEREST           /*추정금리*/
                ,A.BANK_INTEREST          /*은행금리*/
                ,A.INTEREST_STRT_YMD      /*이자계산시작일*/
                ,A.INTEREST_END_YMD		  /*이자계산종료일*/
                ,A.INTEREST_CAL_DCNT      /*이자계산일수*/
                ,CASE
					WHEN CD_ETM_BASIC = 'KA' THEN 'KCB추정'
					WHEN CD_ETM_BASIC = 'KF' THEN 'KCB소급'
					WHEN CD_ETM_BASIC = 'AF' THEN '일괄소급'
					WHEN CD_ETM_BASIC = 'BI' THEN '은행정보'
					WHEN CD_ETM_BASIC = 'MB' THEN '문자정보'
					ELSE
						''
				 END	AS ETM_BASIC_NM   /*금리산정기준코드명*/
                ,A.PAYMENT_YMD            /*결제예정일*/
                ,A.INTEREST_YMD           /*이자납입일*/
                ,A.INTEREST_DAY           /*이자계산일(DD)*/
<!--                 ,A.CD_ETM_BASIC           /*금리산정기준코드(KA:KCB추정/KF:KCB소급/AF:일괄소급/BI:은행정보/MB:문자정보)*/
                ,A.FEES_MID_REPAY         /*중도상환수수료*/ -->
		FROM    DEBT_PERSONAL_REPAY_LIST A
		WHERE   A.NO_PERSON = #{no_person, jdbcType=VARCHAR}
		AND		A.NO_MANAGE_INFO = #{no_manage_info, jdbcType=VARCHAR}
		ORDER BY A.NO_PERSON, A.NO_MANAGE_INFO, A.REQ_YYYYMM
    </select>
    
    <!-- 앱: 부채달력 -->
    <select id="listDebtCalendar" parameterType="com.koscom.debt.model.DebtForm" resultType="com.koscom.debt.model.DebtCalendarVO">
        /* com.koscom.debt.dao.DebtMapper.listDebtCalendar: 부채달력 */
        SELECT   A.NO_PERSON
		        ,A.NO_MANAGE_INFO
		        ,A.CD_FC
		        ,C.NM_FC                                AS NM_FC
		        ,B.INTEREST_YMD
		        ,B.PAYMENT_YMD
		        ,SUBSTR(B.PAYMENT_YMD,1,4)              AS PAY_YYYY
		        ,SUBSTR(B.PAYMENT_YMD,5,2)              AS PAY_MM
		        ,SUBSTR(B.PAYMENT_YMD,7,2)              AS PAY_DD
		        ,FN_AMT_VIEW(B.AMT_REPAY)               AS AMT_REPAY
		        ,CASE
		            WHEN B.PAYMENT_YMD <![CDATA[<=]]> TO_CHAR(SYSDATE,'YYYYMMDD') THEN
		                CASE
		                    WHEN B.YN_KCB = 'Y' AND B.CD_ACCOUNT = '0' THEN
		                        'A' /*상환완료*/
		                    WHEN B.YN_KCB = 'Y' AND B.CD_ACCOUNT != '0' THEN
		                        'B' /*연체중*/
		                    ELSE
		                        'D' /*확인중*/
		                END
		            ELSE
		                'C'         /*상환예정*/
		         END                        AS PAY_TYPE     /*A:상환완료,B:연체중,C:상환예정,D:확인중*/
		        ,CASE
		            WHEN B.PAYMENT_YMD <![CDATA[<=]]> TO_CHAR(SYSDATE,'YYYYMMDD') THEN
		                CASE
		                    WHEN B.YN_KCB = 'Y' AND B.CD_ACCOUNT = '0' THEN
		                        '상환완료'
		                    WHEN B.YN_KCB = 'Y' AND B.CD_ACCOUNT != '0' THEN
		                        '연체중'
		                    ELSE
		                        '확인중'
		                END
		            ELSE
		                '상환예정'
		         END                        AS PAY_TYPE_NM     /*A:상환완료,B:연체중,C:상환예정,D:확인중*/
		FROM    DEBT_PERSONAL_INFO A
		        INNER JOIN DEBT_PERSONAL_REPAY_LIST B
		        ON (
		            B.NO_PERSON = A.NO_PERSON
		        AND B.NO_MANAGE_INFO = A.NO_MANAGE_INFO
		        )
		        LEFT OUTER JOIN FC_INFO C
		        ON A.CD_FC = C.CD_FC
		WHERE   A.NO_PERSON = #{no_person, jdbcType=VARCHAR}
		AND     A.YMD_CANCEL IS NULL
		AND		A.DISPLAY_YN = 'Y'
		AND     A.YMD_LOAN <![CDATA[<=]]> B.INTEREST_YMD
		AND     B.PAYMENT_YMD IS NOT NULL
		AND     B.REQ_YYYYMM = #{req_yyyymm, jdbcType=VARCHAR}
		ORDER BY A.NO_PERSON
		        ,B.INTEREST_YMD
		        ,A.NO_MANAGE_INFO
    </select>
</mapper>