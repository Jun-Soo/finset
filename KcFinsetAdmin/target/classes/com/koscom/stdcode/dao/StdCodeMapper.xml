<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.koscom.stdcode.dao.StdCodeMapper">

<select id="getStdCodeInfo" parameterType="com.koscom.stdcode.model.StdCodeInfo" resultType="com.koscom.stdcode.model.StdCodeInfo">
     SELECT * FROM std_cd
      WHERE code_group = #{code_group}
     <if test="code_value != null and code_value != ''">
		and code_value = #{code_value}
	</if>
     <if test='@com.koscom.util.MybatisUtil@isNotEmpty(nm_code)'>
		and nm_code LIKE '%' || #{nm_code} || '%'
	</if>
</select>

<select id="listStdCodeInfo" parameterType="com.koscom.stdcode.model.StdCodeInfo" resultType="com.koscom.stdcode.model.StdCodeInfo">
	SELECT *
	FROM std_cd
	WHERE code_group = #{code_group}
	AND code_value != ' '
	<if test="nm_code != null and nm_code != ''">
		AND nm_code LIKE '%' || #{nm_code} || '%'
	</if>
	ORDER BY seq_order
</select>

<select id="listStdCode" parameterType="com.koscom.stdcode.model.StdCodeForm" resultType="com.koscom.stdcode.model.StdCodeVO">
	SELECT *
	FROM std_cd
	<where>
		<if test='@com.koscom.util.MybatisUtil@isNotEmpty(code_group)'>
			AND code_group = #{code_group}
		</if>
		<if test='@com.koscom.util.MybatisUtil@isNotEmpty(code_value)'>
			AND code_value = #{code_value}
		</if>
		<if test='@com.koscom.util.MybatisUtil@isNotEmpty(nm_code)'>
			AND nm_code = #{nm_code}
		</if>
		<if test='@com.koscom.util.MybatisUtil@isNotEmpty(yn_code_group)'>
			<choose>
				<when test='"Y".equals(yn_code_group)'>
					AND code_value = ' '
				</when>
				<otherwise>
					AND code_value != ' '
					<if test="@com.koscom.util.MybatisUtil@isNotEmpty(sel_detail)">
					   <if test="sel_detail.equals('code_group')">
					      AND code_group = #{txt_detail}
					   </if>
					   <if test="sel_detail.equals('code_value')">
					      AND code_value = #{txt_detail}
					   </if>
					   <if test="sel_detail.equals('nm_code')">
					      AND nm_code = #{txt_detail}
					   </if>
					   <if test="sel_detail.equals('etc')">
					      AND etc = #{txt_detail}
					   </if>
					</if>
				</otherwise>
			</choose>

			<if test="@com.koscom.util.MybatisUtil@isNotEmpty(sel_detail)">
				<if test="sel_detail.equals('code_group')">
					AND code_group LIKE '%'||#{txt_detail}||'%'
				</if>
				<if test="sel_detail.equals('code_value')">
				   AND code_value LIKE '%'||#{txt_detail}||'%'
				</if>
				<if test="sel_detail.equals('nm_code')">
					AND nm_code LIKE '%'||#{txt_detail}||'%'
				</if>
				<if test="sel_detail.equals('etc')">
					AND etc LIKE '%'||#{txt_detail}||'%'
				</if>
			</if>
		</if>
	</where>
	ORDER BY code_group, seq_order
</select>



<update id="procStdCodeInfo" parameterType="com.koscom.stdcode.model.StdCodeInfo">
	MERGE INTO std_cd
	   USING DUAL
	   ON (code_group = #{code_group} AND code_value = #{code_value} )
	   WHEN MATCHED THEN
	      UPDATE
	         SET  nm_code = #{nm_code, jdbcType=VARCHAR}
				, etc = #{etc, jdbcType=VARCHAR}
				, seq_order = #{seq_order, jdbcType=INTEGER}
				, yn_system_code = #{yn_system_code, jdbcType=VARCHAR}
				, yn_use = #{yn_use, jdbcType=VARCHAR}
<!-- 			, type_txrx = #{type_txrx, jdbcType=VARCHAR} -->
			, type_data = #{type_data, jdbcType=VARCHAR}
			, nm_col = #{nm_col, jdbcType=VARCHAR}
				, id_lst = #{id_lst, jdbcType=VARCHAR}
				, dt_lst = SYSDATE
		WHEN NOT MATCHED THEN
		  INSERT ( 	  code_group
					, code_value
					, nm_code
					, etc
					, seq_order
					, yn_system_code
					, yn_use
<!-- 				,type_txrx -->
				,type_data
				,nm_col
					, id_frt
					, dt_frt
					, id_lst
					, dt_lst
				 )
			VALUES(	  #{code_group, jdbcType=VARCHAR}
				    , #{code_value, jdbcType=VARCHAR}
				    , #{nm_code, jdbcType=VARCHAR}
				    , #{etc, jdbcType=VARCHAR}
				    , #{seq_order, jdbcType=INTEGER}
				    , #{yn_system_code, jdbcType=VARCHAR}
				    , #{yn_use, jdbcType=VARCHAR}
<!-- 				,#{type_txrx, jdbcType=VARCHAR} -->
				,#{type_data, jdbcType=VARCHAR}
				,#{nm_col, jdbcType=VARCHAR}
				    , #{id_frt, jdbcType=VARCHAR}
				    , SYSDATE 
				    , #{id_frt, jdbcType=VARCHAR}
				    , SYSDATE 
				   )
</update>


<delete id="delStdCodeInfo" parameterType="com.koscom.stdcode.model.StdCodeInfo">
	DELETE from std_cd
	 WHERE code_group = #{code_group}
	<if test='@com.koscom.util.MybatisUtil@isNotEmpty(code_value)'>
		AND code_value = #{code_value}
	</if>
</delete>

<!-- 코드그룹의 seq_order,code_value 의 최대값을 가져온다  -->
<select id="getMaxStdCodeInfo" parameterType="com.koscom.stdcode.model.StdCodeInfo" resultType="com.koscom.stdcode.model.StdCodeVO">
	SELECT
			  code_group
			, MAX(seq_order) AS seq_order
			, MAX(code_value) AS code_value
	FROM std_cd
	WHERE code_group=#{code_group}
	GROUP BY code_group
</select>

<!-- 코드그룹의 seq_order를 바꾼다. -->
<update id="modifyListSeq" parameterType="com.koscom.stdcode.model.StdCodeInfo">
	UPDATE std_cd SET seq_order = #{seq_order}
		  ,id_lst = #{id_lst, jdbcType=VARCHAR}
		  ,dt_lst = SYSDATE
	 WHERE code_group = #{code_group}
		   AND code_value = #{code_value}
</update>

</mapper>





